''' PolynomialFiltering.components.Fmp
 (C) Copyright 2019 - Blue Lightning Development, LLC.
 D. F. Linton. support@BlueLightningDevelopment.com

 SPDX-License-Identifier: MIT
 See separate LICENSE file for full text
'''

from typing import Tuple
from abc import abstractmethod
from polynomialfiltering.PythonUtilities import virtual, inline

from math import isnan, exp, log;
from numpy import array, diag, zeros, sqrt, transpose, copy
from numpy import array as vector
from polynomialfiltering.components.ICore import ICore
from polynomialfiltering.components.RecursivePolynomialFilter import RecursivePolynomialFilter


class AbstractCoreFmp(ICore):
    '''
    classdocs
    '''

    '''@theta : float'''
    '''@VRF : array'''

    def __init__(self, tau : float, theta : float):
        '''
        Constructor
        '''
        self.theta = theta;
    
    def getSamplesToStart(self) -> int:
        return 1
        
    @abstractmethod # pragma: no cover
    def getGamma(self, t : float, dtau : float) -> vector:
        """
        Get the innovation scale vector
        
        Arguments:
            t - external time
            dtau - internal step
        
        Returns:
            vector (order+1) of (observation-predict) multipliers
        """
        pass

    def getVRF(self, n : int) -> array:
        """
        Get the variance reduction matrix
        
        Arguments:
            None
        
        Returns:
            Square matrix (order+1) of input to output variance ratios
        
        """
        return copy(self.VRF);
    
    def getFirstVRF(self, n : int) -> float:
        """
        Get the variance reduction factor for the 0th derivative
        
        Arguments:
            None
        
        Returns:
            0th derivative input to output variance ratio
        """
        return self.VRF[0,0]
    
    def getLastVRF(self, n : int) -> float:
        """
        Get the variance reduction factor for the 'order'th derivative
        
        Arguments:
            None
        
        Returns:
            'order'th derivative input to output variance ratio
        """
        return self.VRF[-1,-1]
    
    @abstractmethod # pragma: no cover
    def _getVRF(self, tau : float, theta : float) -> array:
        pass
    
    
class CoreFmp0(AbstractCoreFmp):
    
    def __init__(self, tau : float, theta : float):
        super().__init__(tau, theta)
        self.VRF = self._getVRF(tau, theta);
        
    def getGamma(self, time : float, dtau : float) -> vector:
        """@super"""
        return array([1-self.theta])
    
    def _getVRF(self, u : float, t : float) -> array:
        '''@ V : array : 1 : 1'''
        V = zeros([0+1,0+1])
        V[0,0]=(-t+1.0)/(t+1.0)
        return V;
    
class CoreFmp1(AbstractCoreFmp):
    
    def __init__(self, tau : float, theta : float):
        super().__init__(tau, theta)
        self.VRF = self._getVRF(tau, theta);
        
    def getGamma(self, time : float, dtau : float) -> vector:
        """@super"""
        '''@t2 : float'''
        '''@mt2 : float'''
        '''@t : float'''
        t = self.theta;
        t2 = t*t 
        mt2 = (1-t)*(1-t)
        return array([1-t2, 
                      mt2])
    
    def _getVRF(self, u : float, t : float) -> array:
        '''@ V : array : 2 : 2'''
        '''@s : float'''
        V = zeros([1+1,1+1])
        if (t < 0.5) :
            V[0,0]=(1.0 + t*(3.0 + (1.0 - 5.0*t)*t))/(1.0 + t*(3.0 + t*(3.0 + t)))
            V[0,1]=(1.0 + t*(1.0 + t*(-5.0 + 3.0*t)))/((1.0 + t*(3.0 + t*(3.0 + t)))*u)
            V[1,0]=V[0,1];
            V[1,1]=(2.0 + t*(-6.0 + (6.0 - 2.0*t)*t))/((1.0 + t*(3.0 + t*(3.0 + t)))*u**2)
        else :
            s = 1.0 - t;
            V[0,0]=(s*(-10.0 + (14.0 - 5.0*s)*s))/(-8.0 + s*(12.0 + (-6.0 + s)*s))
            V[0,1]=(s**2*(-4.0 + 3.0*s))/((-8.0 + s*(12.0 + (-6.0 + s)*s))*u)
            V[1,0]=V[0,1];
            V[1,1]=(-2.0*s**3)/((-8.0 + s*(12.0 + (-6.0 + s)*s))*u**2)
        return V;

class CoreFmp2(AbstractCoreFmp):
    
    def __init__(self, tau : float, theta : float):
        super().__init__(tau, theta)
        self.VRF = self._getVRF(tau, theta);
        
    def getGamma(self, time : float, dtau : float) -> vector:
        """@super"""
        '''@t : float'''
        t = self.theta;
        '''@t2 : float'''
        '''@t3 : float'''
        '''@mt2 : float'''
        '''@mt3 : float'''
        t2 = t*t
        t3 = t2*t
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        return array([1-t3, 
                      3.0/2.0*mt2 * (1+t),
                      (2*1)*1.0/2.0*mt3])  # 2! * 1-T^3 ?
    
    def _getVRF(self, u : float, t : float) -> array:
        '''@ V : array : 3 : 3'''
        '''@s : float'''
        V = zeros([2+1,2+1])
        if (t < 0.5) :
            V[0,0]=(1.0 + t*(5.0 + t*(10.0 + t*(8.0 + (-5.0 - 19.0*t)*t))))/(1.0 + t*(5.0 + t*(10.0 + t*(10.0 + t*(5.0 + t)))))
            V[0,1]=(1.5 + t*(6. + t*(6. + t*(-15. + t*(-19.5 + 21.*t)))))/((1. + t*(5. + t*(10. + t*(10. + t*(5. + t)))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(1.0 + t*(2.0 + t*(-2.0 + t*(-16.0 + (25.0 - 10.0*t)*t))))/((1.0 + t*(5.0 + t*(10.0 + t*(10.0 + t*(5.0 + t)))))*u**2)
            V[2,0]=V[0,2];
            V[1,1]=(6.5 + t*(5.5 + t*(-31. + t*(-5. + (48.5 - 24.5*t)*t))))/((1. + t*(5. + t*(10. + t*(10. + t*(5. + t)))))*u**2)
            V[1,2]=(6.0 + t*(-12.0 + t*(-12.0 + t*(48.0 + t*(-42.0 + 12.0*t)))))/((1.0 + t*(5.0 + t*(10.0 + t*(10.0 + t*(5.0 + t)))))*u**3)
            V[2,1]=V[1,2];
            V[2,2]=(6.0 + t*(-30.0 + t*(60.0 + t*(-60.0 + (30.0 - 6.0*t)*t))))/((1.0 + t*(5.0 + t*(10.0 + t*(10.0 + t*(5.0 + t)))))*u**4)
        else :
            s = 1.0 - t;
            V[0,0]=(s*(-66.0 + s*(186.0 + s*(-202.0 + (100.0 - 19.0*s)*s))))/(-32.0 + s*(80.0 + s*(-80.0 + s*(40.0 + (-10.0 + s)*s))))
            V[0,1]=(s**2*(-54.00000000000001 + s*(117. + s*(-85.5 + 21.*s))))/((-32. + s*(80. + s*(-80. + s*(40. + (-10. + s)*s))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(s**3*(-16.0 + (25.0 - 10.0*s)*s))/((-32.0 + s*(80.0 + s*(-80.0 + s*(40.0 + (-10.0 + s)*s))))*u**2)
            V[2,0]=V[0,2];
            V[1,1]=(s**3*(-56. + (74. - 24.5*s)*s))/((-32. + s*(80. + s*(-80. + s*(40. + (-10. + s)*s))))*u**2)
            V[1,2]=(s**4*(-18.0 + 12.0*s))/((-32.0 + s*(80.0 + s*(-80.0 + s*(40.0 + (-10.0 + s)*s))))*u**3)
            V[2,1]=V[1,2];
            V[2,2]=(-6.0*s**5)/((-32.0 + s*(80.0 + s*(-80.0 + s*(40.0 + (-10.0 + s)*s))))*u**4)
        return V;

class CoreFmp3(AbstractCoreFmp):
    
    def __init__(self, tau : float, theta : float):
        super().__init__(tau, theta)
        self.VRF = self._getVRF(tau, theta);
        
    def getGamma(self, time : float, dtau : float) -> vector:
        """@super"""
        '''@t : float'''
        t = self.theta;
        '''@t2 : float'''
        '''@t3 : float'''
        '''@t4 : float'''
        '''@mt2 : float'''
        '''@mt3 : float'''
        '''@mt4 : float'''
        t2 = t*t 
        t3 = t2*t
        t4 = t3*t
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        return array([1-t4, 
                      1.0/6.0*mt2 * (11+14*t+11*t2),
                      (2*1)*mt3*(1+t), # ?
                      (3*2*1)*1.0/6.0*mt4]) # ?
    
    def _getVRF(self, u : float, t : float) -> array:
        '''@ V : array : 4 : 4'''
        '''@s : float'''
        V = zeros([3+1,3+1])
        if (t < 0.5) :
            V[0,0]=(1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(33.0 + t*(7.0 + (-35.0 - 69.0*t)*t))))))/(1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(35.0 + t*(21.0 + t*(7.0 + t)))))))
            V[0,1]=(1.8333333333333333 + t*(11.5 + t*(28.166666666666668 + t*(27.83333333333333 + t*(-35.166666666666664 + t*(-90.16666666666666 + t*(-48.166666666666664 + 104.16666666666666*t)))))))/((1. + t*(7. + t*(21. + t*(35. + t*(35. + t*(21. + t*(7. + t)))))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(2.0 + t*(10.0 + t*(14.0 + t*(-10.0 + t*(-94.0 + t*(10.0 + (158.0 - 90.0*t)*t))))))/((1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(35.0 + t*(21.0 + t*(7.0 + t)))))))*u**2)
            V[2,0]=V[0,2];
            V[0,3]=(1.0 + t*(3.0 + t*(-1.0 + t*(-11.0 + t*(-41.0 + t*(133.0 + t*(-119.0 + 35.0*t)))))))/((1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(35.0 + t*(21.0 + t*(7.0 + t)))))))*u**3)
            V[3,0]=V[0,3];
            V[1,1]=(14.722222222222225 + t*(38.611111111111114 + t*(7.5 + t*(-131.94444444444446 + t*(-94.72222222222223 + t*(112.5 + (214.72222222222223 - 161.38888888888889*t)*t))))))/((1. + t*(7. + t*(21. + t*(35. + t*(35. + t*(21. + t*(7. + t)))))))*u**2)
            V[1,2]=(24.999999999999996 + t*(11.666666666666666 + t*(-94.99999999999999 + t*(-94.99999999999999 + t*(221.66666666666666 + t*(155. + t*(-364.99999999999994 + 141.66666666666666*t)))))))/((1. + t*(7. + t*(21. + t*(35. + t*(35. + t*(21. + t*(7. + t)))))))*u**3)
            V[2,1]=V[1,2];
            V[1,3]=(15.666666666666666 + t*(-33.666666666666664 + t*(-10.999999999999993 + t*(11.666666666666686 + t*(188.33333333333331 + t*(-349. + (233.66666666666666 - 55.666666666666664*t)*t))))))/((1. + t*(7. + t*(21. + t*(35. + t*(35. + t*(21. + t*(7. + t)))))))*u**4)
            V[3,1]=V[1,3];
            V[2,2]=(46.0 + t*(-78.0 + t*(-174.0 + t*(430.0 + t*(-30.0 + t*(-546.0 + (478.0 - 126.0*t)*t))))))/((1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(35.0 + t*(21.0 + t*(7.0 + t)))))))*u**4)
            V[2,3]=(30.0 + t*(-130.0 + t*(150.0 + t*(150.0 + t*(-550.0 + t*(570.0 + t*(-270.0 + 50.0*t)))))))/((1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(35.0 + t*(21.0 + t*(7.0 + t)))))))*u**5)
            V[3,2]=V[2,3];
            V[3,3]=(20.0 + t*(-140.0 + t*(420.0 + t*(-700.0 + t*(700.0 + t*(-420.0 + (140.0 - 20.0*t)*t))))))/((1.0 + t*(7.0 + t*(21.0 + t*(35.0 + t*(35.0 + t*(21.0 + t*(7.0 + t)))))))*u**6)
        else :
            s = 1.0 - t;
            V[0,0]=(s*(-372.0 + s*(1580.0 + s*(-2878.0 + s*(2872.0 + s*(-1652.0 + (518.0 - 69.0*s)*s))))))/(-128.0 + s*(448.0 + s*(-672.0 + s*(560.0 + s*(-280.0 + s*(84.0 + (-14.0 + s)*s))))))
            V[0,1]=(s**2*(-464. + s*(1668. + s*(-2437.333333333333 + s*(1808.333333333333 + s*(-681. + 104.16666666666666*s))))))/((-128. + s*(448. + s*(-672. + s*(560. + s*(-280. + s*(84. + (-14. + s)*s))))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(s**3*(-276.0 + s*(824.0 + s*(-932.0 + (472.0 - 90.0*s)*s))))/((-128.0 + s*(448.0 + s*(-672.0 + s*(560.0 + s*(-280.0 + s*(84.0 + (-14.0 + s)*s))))))*u**2)
            V[2,0]=V[0,2];
            V[0,3]=(s**4*(-64.0 + s*(154.0 + s*(-126.0 + 35.0*s))))/((-128.0 + s*(448.0 + s*(-672.0 + s*(560.0 + s*(-280.0 + s*(84.0 + (-14.0 + s)*s))))))*u**3)
            V[3,0]=V[0,3];
            V[1,1]=(s**3*(-740. + s*(1960. + s*(-1988.3333333333335 + (914.9999999999999 - 161.38888888888889*s)*s))))/((-128. + s*(448. + s*(-672. + s*(560. + s*(-280. + s*(84. + (-14. + s)*s))))))*u**2)
            V[1,2]=(s**4*(-479.99999999999994 + s*(939.9999999999999 + s*(-626.6666666666666 + 141.66666666666666*s))))/((-128. + s*(448. + s*(-672. + s*(560. + s*(-280. + s*(84. + (-14. + s)*s))))))*u**3)
            V[2,1]=V[1,2];
            V[1,3]=(s**5*(-116. + (156. - 55.666666666666664*s)*s))/((-128. + s*(448. + s*(-672. + s*(560. + s*(-280. + s*(84. + (-14. + s)*s))))))*u**4)
            V[3,1]=V[1,3];
            V[2,2]=(s**5*(-324.0 + (404.0 - 126.0*s)*s))/((-128.0 + s*(448.0 + s*(-672.0 + s*(560.0 + s*(-280.0 + s*(84.0 + (-14.0 + s)*s))))))*u**4)
            V[2,3]=(s**6*(-80.0 + 50.0*s))/((-128.0 + s*(448.0 + s*(-672.0 + s*(560.0 + s*(-280.0 + s*(84.0 + (-14.0 + s)*s))))))*u**5)
            V[3,2]=V[2,3];
            V[3,3]=(-20.0*s**7)/((-128.0 + s*(448.0 + s*(-672.0 + s*(560.0 + s*(-280.0 + s*(84.0 + (-14.0 + s)*s))))))*u**6)
        return V;


class CoreFmp4(AbstractCoreFmp):
    
    def __init__(self, tau : float, theta : float):
        super().__init__(tau, theta)
        self.VRF = self._getVRF(tau, theta);
        
    def getGamma(self, time : float, dtau : float) -> vector:
        """@super"""
        '''@t : float'''
        t = self.theta;
        '''@t2 : float'''
        '''@t3 : float'''
        '''@t5 : float'''
        '''@mt2 : float'''
        '''@mt3 : float'''
        '''@mt4 : float'''
        '''@mt5 : float'''
        t2 = t*t 
        t3 = t2*t
        t5 = t2*t3
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        mt5 = mt2*mt3
        return array([1-t5, 
                      5.0/12.0*mt2 * (5+7*t+7*t2+5*t3),
                      (2*1)*5.0/24.0*mt3*(7+10*t+7*t2),
                      (3*2*1)*5.0/12.0*mt4*(1+t),
                      (4*3*2*1)*1.0/24.0*mt5])
    
    def _getVRF(self, u : float, t : float) -> array:
        '''@ V : array : 5 : 5'''
        '''@s : float'''
        V = zeros([4+1,4+1])
        if (t < 0.5) :
            V[0,0]=(-251.0*t**9-159.0*t**8-36.0*t**7+66.0*t**6+124.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0)/(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0)
            V[0,1]=(5.0/12.0)*(1100.0*t**9-182.0*t**8-816.0*t**7-707.0*t**6-170.0*t**5+285.0*t**4+292.0*t**3+151.0*t**2+42.0*t+5.0)/(u*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[1,0]=V[0,1];
            V[0,2]=(1.0/12.0)*(-6510.0*t**9+8190.0*t**8+4620.0*t**7-2955.0*t**6-4850.0*t**5-425.0*t**4+880.0*t**3+755.0*t**2+260.0*t+35.0)/(u**2*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[2,0]=V[0,2];
            V[0,3]=(5.0/2.0)*(154.0*t**9-406.0*t**8+204.0*t**7+209.0*t**6-136.0*t**5-39.0*t**4-4.0*t**3+11.0*t**2+6.0*t+1.0)/(u**3*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[3,0]=V[0,3];
            V[0,4]=-(t-1.0)**5*(70.0*t**4+35.0*t**3*(t+1.0)+15.0*t**2*(t+1.0)**2+5.0*t*(t+1.0)**3+(t+1.0)**4)/(u**4*(t+1.0)**9)
            V[4,0]=V[0,4];
            V[1,1]=(1.0/72.0)*(-60995.0*t**9+55045.0*t**8+56220.0*t**7+4940.0*t**6-37730.0*t**5-38370.0*t**4-1540.0*t**3+11980.0*t**2+8205.0*t+2245.0)/(u**2*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[1,2]=(25.0/72.0)*(2913.0*t**9-5710.0*t**8-304.0*t**7+3608.0*t**6+2114.0*t**5-1516.0*t**4-1528.0*t**3-184.0*t**2+389.0*t+218.0)/(u**3*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[2,1]=V[1,2];
            V[1,3]=-1.0/12.0*(8668.0*t**9-28763.0*t**8+24708.0*t**7+9452.0*t**6-16892.0*t**5-858.0*t**4+1148.0*t**3+3292.0*t**2+288.0*t-1043.0)/(u**4*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[3,1]=V[1,3];
            V[1,4]=(5.0/6.0)*(285.0*t**9-1426.0*t**8+2732.0*t**7-2356.0*t**6+710.0*t**5+80.0*t**4-4.0*t**3+68.0*t**2-139.0*t+50.0)/(u**5*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[4,1]=V[1,4];
            V[2,2]=-1.0/72.0*(87647.0*t**9-262227.0*t**8+155652.0*t**7+158508.0*t**6-70518.0*t**5-160482.0*t**4+51492.0*t**3+54348.0*t**2-273.0*t-14147.0)/(u**4*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[2,3]=(175.0/3.0)*(15.0*t**9-65.0*t**8+91.0*t**7-17.0*t**6-59.0*t**5+25.0*t**4+25.0*t**3-11.0*t**2-8.0*t+4.0)/(u**5*(t**9+9.0*t**8+36.0*t**7+84.0*t**6+126.0*t**5+126.0*t**4+84.0*t**3+36.0*t**2+9.0*t+1.0))
            V[3,2]=V[2,3];
            V[2,4]=-(t-1.0)**7*(420.0*t**2-280.0*t*(t-1.0)+(385.0/6.0)*(t-1.0)**2+15.0*(t+1.0)**2+35.0*(t+1.0)*(2.0*t+1.0))/(u**6*(t+1.0)**9)
            V[4,2]=V[2,4];
            V[3,3]=(5.0/2.0)*(t-1.0)**6*((t+1.0)*(8.0*(-t+1.0)*(t+1.0)-7.0*(t-1.0)*(5.0*t+3.0))+7.0*(5.0*t+3.0)*((-t+1.0)*(t+1.0)-(t-1.0)*(5.0*t+3.0)))/(u**6*(t+1.0)**9)
            V[3,4]=35.0*(t-1.0)**7*(-(-t+1.0)*(t+1.0)+(t-1.0)*(5.0*t+3.0))/(u**7*(t+1.0)**9)
            V[4,3]=V[3,4];
            V[4,4]=70.0*(-t+1.0)**9/(u**8*(t+1.0)**9)
        else :
            s = 1 - t;
            V[0,0]=(s*(-1930.0 + s*(10970.0 + s*(-28100.0 + s*(42280.0 + s*(-40766.0 + s*(25722.0 + s*(-10344.0 + (2418.0 - 251.0*s)*s))))))))/(-512.0 + s*(2304.0 + s*(-4608.0 + s*(5376.0 + s*(-4032.0 + s*(2016.0 + s*(-672.0 + s*(144.0 + (-18.0 + s)*s))))))))
            V[0,1]=(s**2*(-3249.9999999999995 + s*(16349.999999999998 + s*(-35887.5 + s*(44524.99999999999 + s*(-33702.08333333333 + s*(15553.33333333333 + s*(-4049.166666666666 + 458.3333333333333*s))))))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(s**3*(-2909.9999999999995 + s*(12854.999999999998 + s*(-23931.66666666666 + s*(24011.249999999996 + s*(-13684.999999999998 + (4200. - 542.5*s)*s))))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**2)
            V[2,0]=V[0,2];
            V[0,3]=(s**4*(-1350. + s*(5175. + s*(-8012.5 + s*(6249.999999999999 + s*(-2450. + 385.*s))))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**3)
            V[3,0]=V[0,3];
            V[0,4]=(s**5*(-256.0 + s*(837.0 + s*(-1044.0 + (588.0 - 126.0*s)*s))))/((-512.0 + s*(2304.0 + s*(-4608.0 + s*(5376.0 + s*(-4032.0 + s*(2016.0 + s*(-672.0 + s*(144.0 + (-18.0 + s)*s))))))))*u**4)
            V[4,0]=V[0,4];
            V[1,1]=(s**3*(-7040.000000000001 + s*(28020. + s*(-47643.333333333336 + s*(44220. + s*(-23600.55555555556 + (6859.861111111111 - 847.1527777777778*s)*s))))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**2)
            V[1,2]=(s**4*(-6900. + s*(22450. + s*(-29962.5 + s*(20445.833333333332 + s*(-7120.48611111111 + 1011.4583333333333*s))))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**3)
            V[2,1]=V[1,2];
            V[1,3]=(s**5*(-3344. + s*(8763. + s*(-8887.666666666666 + (4104.083333333333 - 722.3333333333333*s)*s))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**4)
            V[3,1]=V[1,3];
            V[1,4]=(s**6*(-649.9999999999999 + s*(1319.9999999999998 + s*(-949.1666666666666 + 237.49999999999997*s))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**5)
            V[4,1]=V[1,4];
            V[2,2]=(s**5*(-7055.999999999999 + s*(17611.999999999996 + s*(-16848.999999999996 + (7313.833333333332 - 1217.3194444444443*s)*s))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**4)
            V[2,3]=(s**6*(-3499.9999999999995 + s*(6474.999999999999 + s*(-4083.333333333333 + 874.9999999999999*s))))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**5)
            V[3,2]=V[2,3];
            V[2,4]=(s**7*(-689.9999999999999 + (865. - 289.16666666666663*s)*s))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**6)
            V[4,2]=V[2,4];
            V[3,3]=(s**7*(-1760. + (2110. - 632.5*s)*s))/((-512. + s*(2304. + s*(-4608. + s*(5376. + s*(-4032. + s*(2016. + s*(-672. + s*(144. + (-18. + s)*s))))))))*u**6)
            V[3,4]=(s**8*(-350.0 + 210.0*s))/((-512.0 + s*(2304.0 + s*(-4608.0 + s*(5376.0 + s*(-4032.0 + s*(2016.0 + s*(-672.0 + s*(144.0 + (-18.0 + s)*s))))))))*u**7)
            V[4,3]=V[3,4];
            V[4,4]=70.0*(-t+1.0)**9/(u**8*(t+1.0)**9)            
        return V;

class CoreFmp5(AbstractCoreFmp):
    
    def __init__(self, tau : float, theta : float):
        super().__init__(tau, theta)
        self.VRF = self._getVRF(tau, theta);
        
    def getGamma(self, time : float, dtau : float) -> vector:
        """@super"""
        '''@t : float'''
        '''@s : float'''
        t = self.theta;
        '''@t2 : float'''
        '''@t3 : float'''
        '''@t4 : float'''
        '''@t6 : float'''
        '''@mt2 : float'''
        '''@mt3 : float'''
        '''@mt4 : float'''
        '''@mt5 : float'''
        '''@mt6 : float'''
        t2 = t*t 
        t3 = t2*t
        t4 = t3*t
        t6 = t2*t4
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        mt5 = mt3*mt2
        mt6 = mt3*mt3
        return array([1-t6, 
                      1.0/60.0*mt2 * (137+202*t+222*t2+202*t3+137*t4),
                      (2*1)*5.0/8.0*mt3*(3+5*t+5*t2+3*t3),
                      (3*2*1)*1.0/24.0*mt4*(17+26*t+17*t2),
                      (4*3*2*1)*1.0/8.0*mt5*(1+t),
                      (5*4*3*2*1)*mt6/120.0 ])
#         s = 1-t
#         return array([1 - (1 - s)**6,
#                       ((137 + 202*(1 - s) + 222*(1 - s)**2 + 202*(1 - s)**3 +  137*(1 - s)**4)*s**2)/60.,
#                       (5*(3 + 5*(1 - s) + 5*(1 - s)**2 + 3*(1 - s)**3)*s**3)/4.,
#                       ((17 + 26*(1 - s) + 17*(1 - s)**2)*s**4)/4.,
#                       3*(2 - s)*s**5,
#                       s**6])     
    
    def _getVRF(self, u : float, t : float) -> array:
        '''@ V : array : 6 : 6'''
        '''@s : float'''
        V = zeros([5+1,5+1])
        if (t < 0.5) :
            V[0,0]=(1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(460.0 + t*(308.0 + t*(55.0 + t*(-275.0 + (-649.0 - 923.0*t)*t))))))))))/(1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))
            V[0,1]=(2.283333333333333 + t*(23.916666666666668 + t*(111.63333333333333 + t*(301.8333333333333 + t*(506.16666666666663 + t*(489.03333333333325 + t*(-103.06666666666666 + t*(-878.1333333333333 + t*(-1341.9166666666667 + t*(-1079.75 + t*(52.1 + 1915.8999999999999*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(3.75 + t*(36.25 + t*(150. + t*(330. + t*(345. + t*(-105. + t*(-1559.5 + t*(-1600.4999999999998 + t*(205.25 + t*(2434.75 + (2535.5 - 2775.5*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**2)
            V[2,0]=V[0,2];
            V[0,3]=(4.25 + t*(36.25 + t*(121.99999999999999 + t*(170.00000000000003 + t*(-65. + t*(-577. + t*(-1937.4999999999998 + t*(1202.5 + t*(3560.75 + t*(480.74999999999994 + t*(-5716.5 + 2719.5*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**3)
            V[3,0]=V[0,3];
            V[0,4]=(3.0 + t*(21.0 + t*(48.0 + t**2*(-180.0 + t*(-252.0 + t*(-1038.0 + t*(3822.0 + t*(-615.0 + t*(-5985.0 + (5814.0 - 1638.0*t)*t)))))))))/((1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))*u**4)
            V[4,0]=V[0,4];
            V[0,5]=(1.0 + t*(5.0 + t*(4.0 + t*(-20.0 + t*(-40.0 + t*(16.0 + t*(-362.0 + t*(2486.0 + t*(-5225.0 + t*(5115.0 + t*(-2442.0 + 462.0*t)))))))))))/((1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))*u**5)
            V[5,0]=V[0,5];
            V[1,1]=(67.92722222222223 + t*(281.83944444444444 + t*(605.9472222222222 + t*(633.9083333333333 + t*(-253.28333333333333 + t*(-2114.6766666666667 + t*(-2347.1233333333334 + t*(-764.5166666666667 + t*(1840.5916666666667 + t*(3593.3527777777776 + (2455.8605555555555 - 3999.827222222222*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**2)
            V[1,2]=(211.75 + t*(532.35 + t*(444.15 + t*(-743.2833333333334 + t*(-2583.4666666666667 + t*(-2537.7333333333336 + t*(2079.4666666666667 + t*(5565.933333333333 + t*(3612.116666666667 + t*(-3487.2833333333333 + t*(-8916.016666666666 + 5822.016666666666*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**3)
            V[2,1]=V[1,2];
            V[1,3]=(340.78333333333336 + t*(263.6666666666667 + t*(-642.0166666666667 + t*(-1542.1000000000004 + t*(-583.1 + t*(266. + t*(7270.900000000001 + t*(1076.6 + t*(-9509.15 + t*(-6702.7333333333345 + (15487.383333333333 - 5726.233333333334*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**4)
            V[3,1]=V[1,3];
            V[1,4]=(301.00000000000006 + t*(-376.6 + t*(-623.0000000000001 + t*(455. + t*(-56.00000000000001 + t*(728.0000000000001 + t*(5667.200000000001 + t*(-10892.000000000002 + t*(-3325.0000000000005 + t*(18991. + t*(-14329. + 3459.4000000000005*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**5)
            V[4,1]=V[1,4];
            V[1,5]=(117.06666666666666 + t*(-430.06666666666666 + t*(516.6666666666666 + t*(-305. + t*(188. + t*(53.199999999999996 + t*(2004.7999999999997 + t*(-9470. + t*(16160.000000000002 + t*(-13599.666666666666 + (5743.066666666667 - 978.0666666666666*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**6)
            V[5,1]=V[1,5];
            V[2,2]=(692.3194444444443 + t*(720.5138888888888 + t*(-1376.1805555555554 + t*(-4350.208333333333 + t*(-2522.916666666666 + t*(10257.916666666666 + t*(7487.083333333332 + t*(-4862.083333333333 + t*(-13762.291666666664 + t*(-4451.319444444443 + (20681.986111111106 - 8514.819444444443*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**4)
            V[2,3]=(1141.875 + t*(-716.625 + t*(-4008.375 + t*(-1449.875 + t*(9416.75 + t*(9367.75 + t*(-14666.75 + t*(-16549.75 + t*(11407.375 + t*(27818.875 + t*(-30170.875 + 8409.625*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**5)
            V[3,2]=V[2,3];
            V[2,4]=(1024.1666666666665 + t*(-2678.1666666666665 + t*(-1021.8333333333333 + t*(6230.5 + t*(-13. + t*(721. + t*(-22477. + t*(19081. + t*(23799.499999999996 + t*(-45136.16666666666 + (25568.166666666664 - 5098.166666666666*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**6)
            V[4,2]=V[2,4];
            V[2,5]=(402.5 + t*(-2019.5 + t*(3489.5 + t*(-2068.5 + t*(441. + t*(-147. + t*(-9261. + t*(29463. + t*(-39091.5 + t*(27086.5 + t*(-9740.5 + 1445.5*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**7)
            V[5,2]=V[2,5];
            V[3,3]=(1911.75 + t*(-4328.25 + t*(-4536.75 + t*(11243.25 + t*(18769.5 + t*(-39406.5 + t*(-8221.5 + t*(37930.5 + t*(17106.75 + t*(-61613.25 + (39482.25 - 8337.75*t)*t))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**6)
            V[3,4]=(1732.5 + t*(-7339.499999999999 + t*(5701.499999999993 + t*(15781.5 + t*(-22491. + t*(-22490.99999999994 + t*(54243. + t*(-189. + t*(-72481.5 + t*(73678.5 + t*(-31216.5 + 5071.5*t)))))))))))/((1. + t*(11. + t*(55. + t*(165. + t*(330. + t*(462. + t*(462. + t*(330. + t*(165. + t*(55. + t*(11. + t)))))))))))*u**7)
            V[4,3]=V[3,4];
            V[3,5]=(686.0 + t*(-4550.0 + t*(11522.0 + t*(-12138.0 + t*(1932.0 + t*(-2940.0 + t*(34692.0 + t*(-69972.0 + t*(68838.0 + t*(-37982.0 + (11354.0 - 1442.0*t)*t))))))))))/((1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))*u**8)
            V[5,3]=V[3,5];
            V[4,4]=(1582.0 + t*(-9814.0 + t*(20230.0 + t*(-1470.0 + t*(-60900.0 + t*(98196.0 + t*(-34692.0 + t*(-75180.0 + t*(114870.0 + t*(-73150.0 + (23422.0 - 3094.0*t)*t))))))))))/((1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))*u**8)
            V[4,5]=(630.0 + t*(-5418.0 + t*(19530.0 + t*(-35910.0 + t*(26460.0 + t*(26460.0 + t*(-89964.0 + t*(109620.0 + t*(-77490.0 + t*(33390.0 + t*(-8190.0 + 882.0*t)))))))))))/((1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))*u**9)
            V[5,4]=V[4,5];
            V[5,5]=(252.0 + t*(-2772.0 + t*(13860.0 + t*(-41580.0 + t*(83160.0 + t*(-116424.0 + t*(116424.0 + t*(-83160.0 + t*(41580.0 + t*(-13860.0 + (2772.0 - 252.0*t)*t))))))))))/((1.0 + t*(11.0 + t*(55.0 + t*(165.0 + t*(330.0 + t*(462.0 + t*(462.0 + t*(330.0 + t*(165.0 + t*(55.0 + t*(11.0 + t)))))))))))*u**10)
        else :
            s = 1.0 - t;
            V[0,0]=(s*(-9516.0 + s*(67812.0 + s*(-224110.0 + s*(451360.0 + s*(-611854.0 + s*(581660.0 + s*(-391622.0 + s*(183920.0 + s*(-57530.0 + (10802.0 - 923.0*s)*s))))))))))/(-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))
            V[0,1]=(s**2*(-20232. + s*(130950. + s*(-383876. + s*(668509. + s*(-761564.1333333333 + s*(588014.5333333333 + s*(-307408.3333333333 + s*(104815.75 + s*(-21127. + 1915.8999999999999*s))))))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u)
            V[1,0]=V[0,1];
            V[0,2]=(s**3*(-24232.000000000004 + s*(141904. + s*(-368135. + s*(552323. + s*(-523962.5 + s*(321742. + s*(-124862.75 + (27994.999999999996 - 2775.5*s)*s))))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**2)
            V[2,0]=V[0,2];
            V[0,3]=(s**4*(-16872. + s*(88878. + s*(-202508. + s*(258450.5 + s*(-199362.5 + s*(92888.25 + s*(-24198. + 2719.5*s))))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**3)
            V[3,0]=V[0,3];
            V[0,4]=(s**5*(-6396.0 + s*(30060.0 + s*(-59418.0 + s*(63120.0 + s*(-37935.0 + (12204.0 - 1638.0*s)*s))))))/((-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))*u**4)
            V[4,0]=V[0,4];
            V[0,5]=(s**6*(-1024.0 + s*(4246.0 + s*(-7150.0 + s*(6105.0 + s*(-2640.0 + 462.0*s))))))/((-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))*u**5)
            V[5,0]=V[0,5];
            V[1,1]=(s**3*(-55580. + s*(295400. + s*(-705460. + s*(986510. + s*(-881918.7999999999 + s*(515277. + s*(-191838.53888888887 + (41542.23888888889 - 3999.827222222222*s)*s))))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**2)
            V[1,2]=(s**4*(-73080. + s*(332640. + s*(-666656.6666666666 + s*(760264.1666666667 + s*(-531638.5666666667 + s*(227563.4666666667 + s*(-55126.166666666664 + 5822.016666666666*s))))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**3)
            V[2,1]=V[1,2];
            V[1,3]=(s**5*(-53255.99999999999 + s*(207647.99999999997 + s*(-347466. + s*(317730. + s*(-166771.73333333334 + (47501.183333333334 - 5726.233333333334*s)*s))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**4)
            V[3,1]=V[1,3];
            V[1,4]=(s**6*(-20720.000000000004 + s*(68306. + s*(-93590.00000000001 + s*(65968. + s*(-23724.4 + 3459.4000000000005*s))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**5)
            V[4,1]=V[1,4];
            V[1,5]=(s**7*(-3372. + s*(9180. + s*(-9962.666666666666 + (5015.666666666667 - 978.0666666666666*s)*s))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**6)
            V[5,1]=V[1,5];
            V[2,2]=(s**5*(-100463.99999999999 + s*(376431.99999999994 + s*(-603259.9999999999 + s*(528079.9999999999 + s*(-265946.52777777775 + (72981.02777777777 - 8514.819444444443*s)*s))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**4)
            V[2,3]=(s**6*(-75040. + s*(230860. + s*(-291676. + s*(188639.5 + s*(-62335. + 8409.625*s))))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**5)
            V[3,2]=V[2,3];
            V[2,4]=(s**7*(-29640. + s*(73056. + s*(-69853.66666666666 + (30511.666666666664 - 5098.166666666666*s)*s))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**6)
            V[4,2]=V[2,4];
            V[2,5]=(s**8*(-4872. + s*(9184. + s*(-6160. + 1445.5*s))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**7)
            V[5,2]=V[2,5];
            V[3,3]=(s**7*(-56880. + s*(136440. + s*(-125367. + (52233. - 8337.75*s)*s))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**6)
            V[3,4]=(s**8*(-22679.999999999996 + s*(40446. + s*(-24570. + 5071.5*s))))/((-2048. + s*(11264. + s*(-28160. + s*(42240. + s*(-42240. + s*(29568. + s*(-14784. + s*(5280. + s*(-1320. + s*(220. + (-22. + s)*s))))))))))*u**7)
            V[4,3]=V[3,4];
            V[3,5]=(s**9*(-3752.0 + (4508.0 - 1442.0*s)*s))/((-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))*u**8)
            V[5,3]=V[3,5];
            V[4,4]=(s**9*(-9100.0 + (10612.0 - 3094.0*s)*s))/((-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))*u**8)
            V[4,5]=(s**10*(-1512.0 + 882.0*s))/((-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))*u**9)
            V[5,4]=V[4,5];
            V[5,5]=(-252.0*s**11)/((-2048.0 + s*(11264.0 + s*(-28160.0 + s*(42240.0 + s*(-42240.0 + s*(29568.0 + s*(-14784.0 + s*(5280.0 + s*(-1320.0 + s*(220.0 + (-22.0 + s)*s))))))))))*u**10)
        return V;


def makeFmpCore(order : int, tau : float, theta : float) -> ICore:
    """
    Factory for fading memory polynomial filter cores
    
    Arguments:
        order - integer polynomial order
        tau - nominal time step
        theta - fading factor [0..1]
        
    Returns:
        fading memory filter core object
    """
    if (order == 0) :
        return CoreFmp0(tau, theta);
    elif (order == 1.0) :
        return CoreFmp1(tau, theta);
    elif (order == 2.0) :
        return CoreFmp2(tau, theta);
    elif (order == 3.0) :
        return CoreFmp3(tau, theta);
    elif (order == 4.0) :
        return CoreFmp4(tau, theta);
    else : # (order == 5.0) :
        return CoreFmp5(tau, theta);
    
def makeFmp(order : int, tau : float, theta : float) -> RecursivePolynomialFilter:
    '''@core : ICore'''
    core = makeFmpCore(order, tau, theta);
    return RecursivePolynomialFilter(order, tau, core)
