'''
Created on Feb 13, 2019

@author: NOOK
'''

from typing import Tuple
from abc import abstractmethod

from numpy import array, zeros
from PolynomialFiltering.Components.AbstractRecursiveFilter import AbstractRecursiveFilter


class FMPBase(AbstractRecursiveFilter) :
    def __init__(self, order : int, theta : float, tau : float) -> None:
        super().__init__(order, tau)
        self.theta = theta
        self.n0 = 1
    
    def gammaParameter(self, t : float, dtau : array) -> array:
        return pow(self.theta, abs(dtau))
        
    @abstractmethod
    def VRF(self) -> array:
        raise NotImplementedError()
        
            
class FMP0(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(0, theta, tau)

    def gamma(self, t : float) -> None:
        return array([1-t])

    def VRF(self) -> array:
        t = self.theta
        V = zeros([self.order+1, self.order+1]);
        #{$FMP0CVRF}
        V[0,0] = ((1-t)/(1+t));

        return V;

class FMP1(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(1, theta, tau)

    def gamma(self, t : float) -> None:
        t2 = t*t 
        mt2 = (1-t)*(1-t)
        return array([1-t2, 
                      mt2])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        V = zeros([self.order+1, self.order+1]);
        #{$FMP1CVRF}
        V[0,0] = (1+t*(3+t-5*((t)*(t))))/(((1+t))*((1+t))*((1+t)));
        V[0,1] = ((((-1+t))*((-1+t)))*(1+3*t))/((((1+t))*((1+t))*((1+t)))*u);
        V[1,0] = V[0,1];
        V[1,1] = (-2*(((-1+t))*((-1+t))*((-1+t))))/((((1+t))*((1+t))*((1+t)))*((u)*(u)));
        return V;
        
class FMP2(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(2, theta, tau)

    def gamma(self, t : float) -> None:
        t2 = t*t
        t3 = t2*t
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        return array([1-t3, 
                      3.0/2.0*mt2 * (1+t),
                      (2*1)*1.0/2.0*mt3])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        V = zeros([self.order+1, self.order+1]);
        #{$FMP2CVRF}
        V[0,0] = (1+t*(5+t*(10+t*(8-t*(5+19*t)))))/(((1+t))*((1+t))*((1+t))*((1+t))*((1+t)));
        V[0,1] = (3*(((-1+t))*((-1+t)))*(1+2*t)*(1+t*(4+7*t)))/(2.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*u);
        V[1,0] = V[0,1];
        V[0,2] = -(((((-1+t))*((-1+t))*((-1+t)))*(1+5*t*(1+2*t)))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u))));
        V[2,0] = V[0,2];
        V[1,1] = -((((-1+t))*((-1+t))*((-1+t)))*(13+t*(50+49*t)))/(2.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[1,2] = (6*(((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(1+2*t))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[2,1] = V[1,2];
        V[2,2] = (-6*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        return V;

class FMP3(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(3, theta, tau)

    def gamma(self, t : float) -> None:
        t2 = t*t 
        t3 = t2*t
        t4 = t3*t
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        return array([1-t4, 
                      1.0/6.0*mt2 * (11+14*t+11*t2),
                      (2*1)*mt3*(1+t),
                      (3*2*1)*1.0/6.0*mt4])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        V = zeros([self.order+1, self.order+1]);
        #{$FMP3CVRF}
        V[0,0] = (1+t*(7+t*(21+t*(35+t*(33+t*(7-t*(35+69*t)))))))/(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)));
        V[0,1] = ((((-1+t))*((-1+t)))*(11+t*(91+t*(340+t*(756+t*(961+625*t))))))/(6.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*u);
        V[1,0] = V[0,1];
        V[0,2] = (-2*(((-1+t))*((-1+t))*((-1+t)))*(1+t*(8+t*(28+t*(56+45*t)))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[2,0] = V[0,2];
        V[0,3] = ((((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(1+7*t*(1+t*(3+5*t))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[3,0] = V[0,3];
        V[1,1] = (-5*(((-1+t))*((-1+t))*((-1+t)))*(53+t*(298+t*(762+t*(970+581*t)))))/(18.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[1,2] = (5*(((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(3+5*t)*(5+t*(14+17*t)))/(3.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[2,1] = V[1,2];
        V[1,3] = -((((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(47+t*(134+167*t)))/(3.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[3,1] = V[1,3];
        V[2,2] = (-2*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(23+t*(76+63*t)))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[2,3] = (10*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(3+5*t))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)));
        V[3,2] = V[2,3];
        V[3,3] = (-20*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)));
        return V;

class FMP4(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(4, theta, tau)

    def gamma(self, t : float) -> None:
        t2 = t*t 
        t3 = t2*t
        t5 = t2*t3
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        return array([1-t5, 
                      5.0/12.0*mt2 * (5+7*t+7*t2+5*t3),
                      (2*1)*5.0/24.0*mt3*(7+10*t+7*t2),
                      (3*2*1)*5.0/12.0*mt4*(1+t),
                      (4*3*2*1)*1.0/24.0*mt4])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        V = zeros([self.order+1, self.order+1]);
        #{$FMP4CVRF}
        V[0,0] = (1+t*(9+t*(36+t*(84+t*(126+t*(124-t*(-66+t*(36+t*(159+251*t)))))))))/(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)));
        V[0,1] = (5*(((-1+t))*((-1+t)))*(5+t*(52+t*(250+t*(740+t*(1515+2*t*(1060+t*(1009+550*t))))))))/(12.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*u);
        V[1,0] = V[0,1];
        V[0,2] = (-5*(((-1+t))*((-1+t))*((-1+t)))*(7+t*(73+t*(349+3*t*(337+14*t*(47+t*(54+31*t)))))))/(12.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[2,0] = V[0,2];
        V[0,3] = (5*(((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(1+t*(10+t*(45+2*t*(60+7*t*(15+11*t))))))/(2.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[3,0] = V[0,3];
        V[0,4] = -(((((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(1+3*t*(3+2*t*(6+7*t*(2+3*t)))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u))));
        V[4,0] = V[0,4];
        V[1,1] = (-5*(((-1+t))*((-1+t))*((-1+t)))*(449+t*(2988+t*(10013+t*(21216+t*(28923+t*(25588+12199*t)))))))/(72.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[1,2] = (25*(((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(218+t*(1261+t*(3552+t*(5986+t*(5942+2913*t))))))/(72.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[2,1] = V[1,2];
        V[1,3] = -((((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(1043+t*(4927+t*(10913+t*(14577+8668*t)))))/(12.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[3,1] = V[1,3];
        V[1,4] = (5*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(50+t*(161+t*(284+285*t))))/(6.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)));
        V[4,1] = V[1,4];
        V[2,2] = (-7*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(2021+t*(10144+t*(22746+t*(25144+12521*t)))))/(72.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[2,3] = (175*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(2+3*t)*(2+5*t*(1+t)))/(3.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)));
        V[3,2] = V[2,3];
        V[2,4] = (-5*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(137+t*(344+347*t)))/(6.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)));
        V[4,2] = V[2,4];
        V[3,3] = (-5*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(113+t*(338+253*t)))/(2.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)));
        V[3,4] = (70*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(2+3*t))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)));
        V[4,3] = V[3,4];
        V[4,4] = (-70*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)));
        return V;

class FMP5(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(5, theta, tau)

    def gamma(self, t : float) -> None:
        t2 = t*t 
        t3 = t2*t
        t4 = t3*t
        t6 = t2*t4
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        mt5 = mt3*mt2
        mt6 = mt3*mt3
        return array([1-t6, 
                      1.0/60.0*mt2 * (137+202*t+222*t2+202*t3+137*t4),
                      (2*1)*5.0/8.0*mt3*(1+t)*(3+2*t+3*t2),
                      (3*2*1)*1.0/24.0*mt4*(17+26*t+17*t2),
                      (4*3*2*1)*1.0/8.0*mt5*(1+t),
                      (5*4*3*2*1)*1.0/120.0*mt6 ])
        
    def nSwitch(self):
        return 7.7478/(1.0-self.theta)
 
    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        V = zeros([self.order+1, self.order+1]);
        #{$FMP5CVRF}
        V[0,0] = -(((-1+t)*(923+t*(1572+t*(1847+t*(1792+t*(1484+t*(1024+t*(562+t*(232+t*(67+t*(12+t)))))))))))/(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))));
        V[0,1] = ((((-1+t))*((-1+t)))*(114954+t*(233034+t*(286329+t*(259109+t*(179201+t*(93109+t*(36359+t*(9979+t*(1709+137*t))))))))))/(60.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*u);
        V[1,0] = V[0,1];
        V[0,2] = -((((-1+t))*((-1+t))*((-1+t)))*(11102+t*(23164+t*(26447+5*t*(4026+t*(2123+t*(828+t*(225+t*(38+3*t)))))))))/(4.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[2,0] = V[0,2];
        V[0,3] = ((((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(10878+t*(20646+t*(19239+t*(10835+t*(4422+t*(1238+t*(213+17*t))))))))/(4.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[3,0] = V[0,3];
        V[0,4] = (-3*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(546+t*(792+t*(495+t*(220+t*(66+t*(12+t)))))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[4,0] = V[0,4];
        V[0,5] = ((((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(462+t*(330+t*(165+t*(55+t*(11+t))))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)));
        V[5,0] = V[0,5];
        V[1,1] = (-7*(((-1+t))*((-1+t))*((-1+t)))*(1028527+t*(2454074+t*(3352636+t*(3250918+t*(2345510+t*(1239958+t*(478036+t*(124874+17467*t)))))))))/(1800.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)));
        V[1,2] = (7*(((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(49903+t*(123189+t*(163447+t*(145227+t*(90787+3*t*(13403+t*(3941+605*t))))))))/(60.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)));
        V[2,1] = V[1,2];
        V[1,3] = (-7*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(49082+t*(112661+t*(129937+t*(95402+t*(49612+t*(16865+2921*t)))))))/(60.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[3,1] = V[1,3];
        V[1,4] = (7*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(2471+t*(4591+t*(4046+t*(2456+t*(1021+215*t))))))/(5.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)));
        V[4,1] = V[1,4];
        V[1,5] = -((((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(14671+t*(16551+t*(11761+t*(5841+1756*t)))))/(15.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)));
        V[5,1] = V[1,5];
        V[2,2] = (-7*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(87581+t*(225176+t*(295855+t*(244880+t*(129715+t*(43016+7121*t)))))))/(72.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)));
        V[2,3] = (7*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(9611+t*(23185+t*(26738+9*t*(1990+t*(779+145*t))))))/(8.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)));
        V[3,2] = V[2,3];
        V[2,4] = -((((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(30589+t*(60714+t*(53446+t*(26946+6145*t)))))/(6.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)));
        V[4,2] = V[2,4];
        V[2,5] = (7*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(413+t*(521+t*(343+115*t))))/(2.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)));
        V[5,2] = V[2,5];
        V[3,3] = (-3*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(11117+t*(25176+t*(24926+t*(12072+2549*t)))))/(4.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)));
        V[3,4] = (63*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(7+5*t)*(23+t*(26+11*t)))/(2.*(((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)));
        V[4,3] = V[3,4];
        V[3,5] = (-14*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(103+t*(116+49*t)))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)));
        V[5,3] = V[3,5];
        V[4,4] = (-14*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(221+t*(316+113*t)))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)));
        V[4,5] = (126*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t)))*(7+5*t))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)));
        V[5,4] = V[4,5];
        V[5,5] = (-252*(((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))*((-1+t))))/((((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t))*((1+t)))*((u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)*(u)));
        return V;

    
def makeFMP(order, theta : float, tau : float ) -> FMPBase :
    Fmps = [FMP0, FMP1, FMP2, FMP3, FMP4, FMP5];
    return Fmps[order](theta, tau);
        
        