'''
Created on Feb 13, 2019

@author: NOOK
'''

from typing import Tuple
from abc import abstractmethod

from numpy import array
from PolynomialFiltering.Components.AbstractRecursiveFilter import AbstractRecursiveFilter


class FMPBase(AbstractRecursiveFilter) :
    def __init__(self, order : int, theta : float, tau : float) -> None:
        super().__init__(order, tau)
        self.theta = theta
    
    def gammaParameter(self, t : array, dtau : array) -> array:
        return pow(self.theta, abs(dtau))
        
    @abstractmethod
    def VRF(self) -> array:
        raise NotImplementedError()
        
            
class FMP0(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(0, theta, tau)

    def gamma(self, t : array) -> None:
        return array([1-t])

    def VRF(self) -> array:
        t = self.theta
        mt = (1-t)
        pt = (1+t)
        return array([mt / pt])

class FMP1(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(1, theta, tau)

    def gamma(self, t : array) -> None:
        t2 = t*t 
        mt2 = (1-t)*(1-t)
        return array([1-t2, 
                      mt2])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        return array([
            ((((((((t)*(t)))+((4)*(t)))+(5)))*(((1)-(t)))))/((((((1)+(t)))*(((1)+(t))))*(((1)+(t))))),
            (((((2)*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((u)*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t)))))
            ])
        
class FMP2(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(2, theta, tau)

    def gamma(self, t : array) -> None:
        t2 = t*t
        t3 = t2*t
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        return array([1-t3, 
                      3.0/2.0*mt2 * (1+t),
                      (2*1)*1.0/2.0*mt3])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        return array([
            ((((((((((((t)*(t))*(t))*(t)))+((6)*((((t)*(t))*(t)))))+((16)*(((t)*(t)))))+((24)*(t)))+(19)))*(((1)-(t)))))/((((((((1)+(t)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            (((((((((13)*(((t)*(t))))+((50)*(t)))+(49)))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((2)*(((u)*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            (((((((6)*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((((((u)*(u))*(u))*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t)))))
            ])

class FMP3(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(3, theta, tau)

    def gamma(self, t : array) -> None:
        t2 = t*t 
        t3 = t2*t
        t4 = t3*t
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        return array([1-t4, 
                      1.0/6.0*mt2 * (11+14*t+11*t2),
                      (2*1)*mt3*(1+t),
                      (3*2*1)*1.0/6.0*mt4])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        return array([
            ((((((((((((((((t)*(t))*(t))*(t))*(t))*(t)))+((8)*((((((t)*(t))*(t))*(t))*(t)))))+((29)*(((((t)*(t))*(t))*(t)))))+((64)*((((t)*(t))*(t)))))+((97)*(((t)*(t)))))+((104)*(t)))+(69)))*(((1)-(t)))))/((((((((((1)+(t)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((5)*(((((((53)*(((((t)*(t))*(t))*(t))))+((298)*((((t)*(t))*(t)))))+((762)*(((t)*(t)))))+((970)*(t)))+(581))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((18)*(((u)*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((((2)*(((((23)*(((t)*(t))))+((76)*(t)))+(63))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((((((((u)*(u))*(u))*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            (((((((((20)*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((((((((((u)*(u))*(u))*(u))*(u))*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t)))))
            ])

class FMP4(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(4, theta, tau)

    def gamma(self, t : array) -> None:
        t2 = t*t 
        t3 = t2*t
        t5 = t2*t3
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        return array([1-t5, 
                      5.0/12.0*mt2 * (5+7*t+7*t2+5*t3),
                      (2*1)*5.0/24.0*mt3*(7+10*t+7*t2),
                      (3*2*1)*5.0/12.0*mt4*(1+t),
                      (4*3*2*1)*1.0/24.0*mt4])

    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        return array([
            ((((((((((((((((((((t)*(t))*(t))*(t))*(t))*(t))*(t))*(t)))+((10)*((((((((t)*(t))*(t))*(t))*(t))*(t))*(t)))))+((46)*(((((((t)*(t))*(t))*(t))*(t))*(t)))))+((130)*((((((t)*(t))*(t))*(t))*(t)))))+((256)*(((((t)*(t))*(t))*(t)))))+((380)*((((t)*(t))*(t)))))+((446)*(((t)*(t)))))+((410)*(t)))+(251)))*(((1)-(t)))))/((((((((((((1)+(t)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((5)*(((((((((449)*(((((((t)*(t))*(t))*(t))*(t))*(t))))+((2988)*((((((t)*(t))*(t))*(t))*(t)))))+((10013)*(((((t)*(t))*(t))*(t)))))+((21216)*((((t)*(t))*(t)))))+((28923)*(((t)*(t)))))+((25588)*(t)))+(12199))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((((72)*(((u)*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((((7)*(((((((2021)*(((((t)*(t))*(t))*(t))))+((10144)*((((t)*(t))*(t)))))+((22746)*(((t)*(t)))))+((25144)*(t)))+(12521))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((((72)*(((((u)*(u))*(u))*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((((((5)*(((((113)*(((t)*(t))))+((338)*(t)))+(253))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((((2)*(((((((u)*(u))*(u))*(u))*(u))*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            (((((((((((70)*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((((((((((((((u)*(u))*(u))*(u))*(u))*(u))*(u))*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t)))))
            ])

class FMP5(FMPBase):    
    def __init__(self, theta : float, tau : float) -> None:
        super().__init__(5, theta, tau)

    def gamma(self, t : array) -> None:
        t2 = t*t 
        t3 = t2*t
        t4 = t3*t
        t6 = t2*t4
        mt2 = (1-t)*(1-t)
        mt3 = (1-t)*mt2
        mt4 = mt2*mt2
        mt5 = mt3*mt2
        mt6 = mt3*mt3
        return array([1-t6, 
                      1.0/60.0*mt2 * (137+202*t+222*t2+202*t3+137*t4),
                      (2*1)*5.0/8.0*mt3*(1+t)*(3+2*t+3*t2),
                      (3*2*1)*1.0/24.0*mt4*(17+26*t+17*t2),
                      (4*3*2*1)*1.0/8.0*mt5*(1+t),
                      (5*4*3*2*1)*1.0/120.0*mt6 ])
        
    def nSwitch(self):
        return 7.7478/(1.0-self.theta)
 
    def VRF(self) -> array:
        t = self.theta
        u = self.tau;
        return array([
            ((((((((((((((((((((((((t)*(t))*(t))*(t))*(t))*(t))*(t))*(t))*(t))*(t)))+((12)*((((((((((t)*(t))*(t))*(t))*(t))*(t))*(t))*(t))*(t)))))+((67)*(((((((((t)*(t))*(t))*(t))*(t))*(t))*(t))*(t)))))+((232)*((((((((t)*(t))*(t))*(t))*(t))*(t))*(t)))))+((562)*(((((((t)*(t))*(t))*(t))*(t))*(t)))))+((1024)*((((((t)*(t))*(t))*(t))*(t)))))+((1484)*(((((t)*(t))*(t))*(t)))))+((1792)*((((t)*(t))*(t)))))+((1847)*(((t)*(t)))))+((1572)*(t)))+(923)))*(((1)-(t)))))/((((((((((((((1)+(t)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((7)*(((((((((((17467)*(((((((((t)*(t))*(t))*(t))*(t))*(t))*(t))*(t))))+((124874)*((((((((t)*(t))*(t))*(t))*(t))*(t))*(t)))))+((478036)*(((((((t)*(t))*(t))*(t))*(t))*(t)))))+((1239958)*((((((t)*(t))*(t))*(t))*(t)))))+((2345510)*(((((t)*(t))*(t))*(t)))))+((3250918)*((((t)*(t))*(t)))))+((3352636)*(((t)*(t)))))+((2454074)*(t)))+(1028527))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((((((1800)*(((u)*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((((7)*(((((((((7121)*(((((((t)*(t))*(t))*(t))*(t))*(t))))+((43016)*((((((t)*(t))*(t))*(t))*(t)))))+((129715)*(((((t)*(t))*(t))*(t)))))+((244880)*((((t)*(t))*(t)))))+((295855)*(((t)*(t)))))+((225176)*(t)))+(87581))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((((((72)*(((((u)*(u))*(u))*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((((((3)*(((((((2549)*(((((t)*(t))*(t))*(t))))+((12072)*((((t)*(t))*(t)))))+((24926)*(((t)*(t)))))+((25176)*(t)))+(11117))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/((((((((((((((4)*(((((((u)*(u))*(u))*(u))*(u))*(u))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            ((((((((((((14)*(((((113)*(((t)*(t))))+((316)*(t)))+(221))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((((((((((((((((u)*(u))*(u))*(u))*(u))*(u))*(u))*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))),
            (((((((((((((252)*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t))))*(((1)-(t)))))/(((((((((((((((((((((((u)*(u))*(u))*(u))*(u))*(u))*(u))*(u))*(u))*(u)))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t))))*(((1)+(t)))))
            ])

    
def makeFMP(order, theta : float, tau : float ) -> FMPBase :
    Fmps = [FMP0, FMP1, FMP2, FMP3, FMP4, FMP5];
    return Fmps[order](theta, tau);
        
        