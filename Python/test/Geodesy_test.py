'''
Created on Oct 1, 2019

@author: lintondf
'''
import unittest
from numpy import array, pi, sin, cos, transpose, sqrt, arctan2, zeros
from numpy import array as vector
from pymap3d import geodetic2ecef, ecef2geodetic
from pylint.test.functional import bad_staticmethod_argument
from math import radians

from TestSuite import TestCaseBase
from TestUtilities import A2S

from polynomialfiltering.Geodesy import Geodesy
from polynomialfiltering.Site import Site

class Geodesy_test(TestCaseBase):


    def stepEcef(self):
        data = array([
            [100.00000000000,  34.836898000000,  -121.77140100000,  319343.60000000,  -9191284.0000000,  -14840559.000000,  12069004.000000],
            [110.00000000000,  34.824071000000,  -122.05958100000,  383929.80000000,  -9295391.0000000,  -14841370.000000,  12101996.000000],
            [120.00000000000,  34.808492000000,  -122.39273400000,  456145.20000000,  -9415061.0000000,  -14839922.000000,  12138478.000000],
            [130.00000000000,  34.790054000000,  -122.76618500000,  534983.90000000,  -9548746.0000000,  -14835975.000000,  12177830.000000],
            [140.00000000000,  34.769356000000,  -123.16441300000,  617249.70000000,  -9691009.0000000,  -14829509.000000,  12218398.000000],
            [150.00000000000,  34.746071000000,  -123.58894300000,  703333.40000000,  -9842505.0000000,  -14820365.000000,  12260292.000000],
            [160.00000000000,  34.719633000000,  -124.04447100000,  794306.70000000,  -10005056.000000,  -14808300.000000,  12303932.000000],
            [170.00000000000,  34.688895000000,  -124.54161300000,  892034.90000000,  -10182478.000000,  -14792570.000000,  12350004.000000],
            [180.00000000000,  34.652606000000,  -125.08880400000,  998186.40000000,  -10377985.000000,  -14772514.000000,  12399034.000000],
            [190.00000000000,  34.612127000000,  -125.66053000000,  1108383.3000000,  -10582861.000000,  -14749039.000000,  12448925.000000],
            [200.00000000000,  34.569796000000,  -126.22650600000,  1216950.1000000,  -10786311.000000,  -14723329.000000,  12497170.000000],
            [210.00000000000,  34.525673000000,  -126.78687100000,  1323897.0000000,  -10988327.000000,  -14695418.000000,  12543786.000000],
            [220.00000000000,  34.479814000000,  -127.34176500000,  1429233.4000000,  -11188898.000000,  -14665339.000000,  12588791.000000],
            [230.00000000000,  34.432273000000,  -127.89132100000,  1532968.9000000,  -11388017.000000,  -14633125.000000,  12632202.000000],
            [240.00000000000,  34.383102000000,  -128.43566800000,  1635112.5000000,  -11585676.000000,  -14598806.000000,  12674035.000000],
            [250.00000000000,  34.332349000000,  -128.97493200000,  1735673.4000000,  -11781866.000000,  -14562415.000000,  12714306.000000],
            [260.00000000000,  34.280063000000,  -129.50923300000,  1834662.2000000,  -11976579.000000,  -14523983.000000,  12753034.000000],
            [270.00000000000,  34.226287000000,  -130.03868900000,  1932085.1000000,  -12169807.000000,  -14483538.000000,  12790231.000000],
            [280.00000000000,  34.171066000000,  -130.56341600000,  2027950.3000000,  -12361542.000000,  -14441110.000000,  12825913.000000],
            [290.00000000000,  34.114438000000,  -131.08353100000,  2122267.2000000,  -12551779.000000,  -14396726.000000,  12860095.000000],
            [300.00000000000,  34.056440000000,  -131.59910600000,  2215055.7000000,  -12740509.000000,  -14350431.000000,  12892798.000000]
            ])
        
        geodesy = Geodesy()
        for i in range(0,data.shape[0]) :
            ecef = geodesy.geodetic2ECEF( radians(data[i,1]), radians(data[i,2]), 0.3048*data[i,3])
            err = ecef-0.3048*data[i,4:7]
            print('PLH2EFG', i, A2S(ecef), A2S(err), (err < 1.0).all())


    def stepGeneral(self):
        geodesy = Geodesy()
        lat = radians(21 + 34/60.0 + 19.6344/3600.0)
        lon = radians(-158 - 15/60.0-59.9095/3600.0)
        ecef = geodesy.geodetic2ECEF(lat, lon, 1000)
        err = ecef - array([-5513122.50228141, -2197656.90777665,  2330786.62031832]) 
        print('PLH2EFG', A2S(ecef), A2S(err), (abs(err) < 1e-3).all())
        
        expectedAER = array([1.18490418e+00, 1.96078968e-01, 1.82913439e+06, 1.19987743e-05, 1.40109679e-06, 2.34567665e+03])
        XYZ = array([[1662153, 675268, 356361, 2139.18, 845.83, 459.51]])
        actualAER = Site.ENU2AER(XYZ)
        print('ENU2AER', A2S(actualAER), (abs((actualAER - expectedAER)/expectedAER)< 1e-8).all())
        ENU = Site.AER2ENU(actualAER)
        print('AER2ENU', A2S(ENU), (abs(ENU-XYZ) < 1e-8).all())
        
        site = Site('Test', radians(28+25/60.0+28.9603/3600.0), radians(279+20/60.0+8.2044/3600.0), 0, geodesy)
        expectedDC = array([[ 0.98675508,  -0.07721595, 0.14266081],
            [ 0.16221717,  0.46969892, -0.8677952 ],
            [ 0.,          0.87944336,  0.47600355]])
        print('SiteDC', (abs(site.DC - expectedDC) < 1e-8).all())
        
        xi = radians( 9.63/3600.0 );
        eta = radians( 13.08/3600.0 );
        site = Site('Test', lat, lon, 0.3048 * 987.97, geodesy, xi, eta)
        EFG = array([[ -4974117.68734, -3772148.539385, 3089527.248933, 684.23,       -2030.14,         955.54 ]])
        expectedXYZ = array([1.66215343e+06, 6.75268476e+05, 3.56361202e+05, 2.13918584e+03, 8.45832130e+02, 4.59508165e+02])
        ENU = site.ECEF2ENU(EFG)
        err = (ENU-expectedXYZ)/expectedXYZ
        print('ECEF2ENU', A2S(ENU), (abs(err) < 1e-8).all() )
        ECEF = site.ENU2ECEF(ENU)
        err = ECEF - EFG
        print('ENU2ECEF', A2S(ECEF), (abs(err) < 1e-8).all() )
        
if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()