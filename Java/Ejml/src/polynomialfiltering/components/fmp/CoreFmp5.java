/***** /polynomialfiltering/components/Fmp/CoreFmp5/
 * (C) Copyright 2019 - Blue Lightning Development, LLC.
 * D. F. Linton. support@BlueLightningDevelopment.com
 *
 * SPDX-License-Identifier: MIT
 * See separate LICENSE file for full text
 *
 * AUTO-GENERATED Java from Python Reference Implementation
 */

package polynomialfiltering.components.fmp;
 
import java.util.stream.IntStream;
import org.ejml.data.DMatrixRMaj;
import org.ejml.dense.row.CommonOps_DDRM;
import polynomialfiltering.main.FilterStatus;
import polynomialfiltering.main.AbstractFilter;
import polynomialfiltering.main.AbstractFilterWithCovariance;
import static polynomialfiltering.main.Utility.*;
import polynomialfiltering.components.ICore;
import polynomialfiltering.components.fmp.AbstractCoreFmp;

 
public class CoreFmp5 extends AbstractCoreFmp {
    
    public CoreFmp5() {}  // auto-generated null constructor

    
    public CoreFmp5 (final double tau, final double theta) {
        super(tau,theta);
                
        this.VRF = this._getVRF(tau, theta);
    }
    

    ///// @brief Get the innovation scale vector
    /// 
    /// 
    ///  @param		t	external time
    ///  @param		dtau	internal step
    /// 
    ///  @return  vector (order+1) of (observation-predict) multipliers
    /// 
    
    public DMatrixRMaj getGamma (final double time, final double dtau) {
        double t;
        double s;
                
        t = this.theta;
        double t2;
        double t3;
        double t4;
        double t6;
        double mt2;
        double mt3;
        double mt4;
        double mt5;
        double mt6;
                
        t2 = t * t;
                
        t3 = t2 * t;
                
        t4 = t3 * t;
                
        t6 = t2 * t4;
                
        mt2 = (1 - t) * (1 - t);
                
        mt3 = (1 - t) * mt2;
                
        mt4 = mt2 * mt2;
                
        mt5 = mt3 * mt2;
                
        mt6 = mt3 * mt3;
        return (new DMatrixRMaj(new double[] {1. - t6, 1.0 / 60.0 * mt2 * (137. + 202. * t + 222. * t2 + 202. * t3 + 137. * t4), (2. * 1.) * 5.0 / 8.0 * mt3 * (3. + 5. * t + 5. * t2 + 3. * t3), (3. * 2. * 1.) * 1.0 / 24.0 * mt4 * (17. + 26. * t + 17. * t2), (4. * 3. * 2. * 1.) * 1.0 / 8.0 * mt5 * (1. + t), (5. * 4. * 3. * 2. * 1.) * mt6 / 120.0}));
    }
    
    
    protected DMatrixRMaj _getVRF (final double u, final double t) {
        DMatrixRMaj V = new DMatrixRMaj(6, 6);
        double s;
                
        //  V = zeros(5 + 1, 5 + 1)
        CommonOps_DDRM.fill( V, 0.0 );
        if (t < 0.5) {
                        
            V.unsafe_set(0, 0, (1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (460.0 + t * (308.0 + t * (55.0 + t * (-275.0 + (-649.0 - 923.0 * t) * t)))))))))) / (1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))));
                        
            V.unsafe_set(0, 1, (2.283333333333333 + t * (23.916666666666668 + t * (111.63333333333333 + t * (301.8333333333333 + t * (506.16666666666663 + t * (489.03333333333325 + t * (-103.06666666666666 + t * (-878.1333333333333 + t * (-1341.9166666666667 + t * (-1079.75 + t * (52.1 + 1915.8999999999999 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * u));
                        
            //  V(1, 0) = V(0, 1)
            double     td99 = V.get(0, 1);
            V.unsafe_set(1, 0, td99);
                        
            V.unsafe_set(0, 2, (3.75 + t * (36.25 + t * (150. + t * (330. + t * (345. + t * (-105. + t * (-1559.5 + t * (-1600.4999999999998 + t * (205.25 + t * (2434.75 + (2535.5 - 2775.5 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 2)));
                        
            //  V(2, 0) = V(0, 2)
            double     td149 = V.get(0, 2);
            V.unsafe_set(2, 0, td149);
                        
            V.unsafe_set(0, 3, (4.25 + t * (36.25 + t * (121.99999999999999 + t * (170.00000000000003 + t * (-65. + t * (-577. + t * (-1937.4999999999998 + t * (1202.5 + t * (3560.75 + t * (480.74999999999994 + t * (-5716.5 + 2719.5 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 3)));
                        
            //  V(3, 0) = V(0, 3)
            double     td200 = V.get(0, 3);
            V.unsafe_set(3, 0, td200);
                        
            V.unsafe_set(0, 4, (3.0 + t * (21.0 + t * (48.0 + Math.pow(t, 2) * (-180.0 + t * (-252.0 + t * (-1038.0 + t * (3822.0 + t * (-615.0 + t * (-5985.0 + (5814.0 - 1638.0 * t) * t))))))))) / ((1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))) * Math.pow(u, 4)));
                        
            //  V(4, 0) = V(0, 4)
            double     td251 = V.get(0, 4);
            V.unsafe_set(4, 0, td251);
                        
            V.unsafe_set(0, 5, (1.0 + t * (5.0 + t * (4.0 + t * (-20.0 + t * (-40.0 + t * (16.0 + t * (-362.0 + t * (2486.0 + t * (-5225.0 + t * (5115.0 + t * (-2442.0 + 462.0 * t))))))))))) / ((1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))) * Math.pow(u, 5)));
                        
            //  V(5, 0) = V(0, 5)
            double     td303 = V.get(0, 5);
            V.unsafe_set(5, 0, td303);
                        
            V.unsafe_set(1, 1, (67.92722222222223 + t * (281.83944444444444 + t * (605.9472222222222 + t * (633.9083333333333 + t * (-253.28333333333333 + t * (-2114.6766666666667 + t * (-2347.1233333333334 + t * (-764.5166666666667 + t * (1840.5916666666667 + t * (3593.3527777777776 + (2455.8605555555555 - 3999.827222222222 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 2)));
                        
            V.unsafe_set(1, 2, (211.75 + t * (532.35 + t * (444.15 + t * (-743.2833333333334 + t * (-2583.4666666666667 + t * (-2537.7333333333336 + t * (2079.4666666666667 + t * (5565.933333333333 + t * (3612.116666666667 + t * (-3487.2833333333333 + t * (-8916.016666666666 + 5822.016666666666 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 3)));
                        
            //  V(2, 1) = V(1, 2)
            double     td405 = V.get(1, 2);
            V.unsafe_set(2, 1, td405);
                        
            V.unsafe_set(1, 3, (340.78333333333336 + t * (263.6666666666667 + t * (-642.0166666666667 + t * (-1542.1000000000004 + t * (-583.1 + t * (266. + t * (7270.900000000001 + t * (1076.6 + t * (-9509.15 + t * (-6702.7333333333345 + (15487.383333333333 - 5726.233333333334 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 4)));
                        
            //  V(3, 1) = V(1, 3)
            double     td457 = V.get(1, 3);
            V.unsafe_set(3, 1, td457);
                        
            V.unsafe_set(1, 4, (301.00000000000006 + t * (-376.6 + t * (-623.0000000000001 + t * (455. + t * (-56.00000000000001 + t * (728.0000000000001 + t * (5667.200000000001 + t * (-10892.000000000002 + t * (-3325.0000000000005 + t * (18991. + t * (-14329. + 3459.4000000000005 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 5)));
                        
            //  V(4, 1) = V(1, 4)
            double     td510 = V.get(1, 4);
            V.unsafe_set(4, 1, td510);
                        
            V.unsafe_set(1, 5, (117.06666666666666 + t * (-430.06666666666666 + t * (516.6666666666666 + t * (-305. + t * (188. + t * (53.199999999999996 + t * (2004.7999999999997 + t * (-9470. + t * (16160.000000000002 + t * (-13599.666666666666 + (5743.066666666667 - 978.0666666666666 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 6)));
                        
            //  V(5, 1) = V(1, 5)
            double     td561 = V.get(1, 5);
            V.unsafe_set(5, 1, td561);
                        
            V.unsafe_set(2, 2, (692.3194444444443 + t * (720.5138888888888 + t * (-1376.1805555555554 + t * (-4350.208333333333 + t * (-2522.916666666666 + t * (10257.916666666666 + t * (7487.083333333332 + t * (-4862.083333333333 + t * (-13762.291666666664 + t * (-4451.319444444443 + (20681.986111111106 - 8514.819444444443 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 4)));
                        
            V.unsafe_set(2, 3, (1141.875 + t * (-716.625 + t * (-4008.375 + t * (-1449.875 + t * (9416.75 + t * (9367.75 + t * (-14666.75 + t * (-16549.75 + t * (11407.375 + t * (27818.875 + t * (-30170.875 + 8409.625 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 5)));
                        
            //  V(3, 2) = V(2, 3)
            double     td666 = V.get(2, 3);
            V.unsafe_set(3, 2, td666);
                        
            V.unsafe_set(2, 4, (1024.1666666666665 + t * (-2678.1666666666665 + t * (-1021.8333333333333 + t * (6230.5 + t * (-13. + t * (721. + t * (-22477. + t * (19081. + t * (23799.499999999996 + t * (-45136.16666666666 + (25568.166666666664 - 5098.166666666666 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 6)));
                        
            //  V(4, 2) = V(2, 4)
            double     td718 = V.get(2, 4);
            V.unsafe_set(4, 2, td718);
                        
            V.unsafe_set(2, 5, (402.5 + t * (-2019.5 + t * (3489.5 + t * (-2068.5 + t * (441. + t * (-147. + t * (-9261. + t * (29463. + t * (-39091.5 + t * (27086.5 + t * (-9740.5 + 1445.5 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 7)));
                        
            //  V(5, 2) = V(2, 5)
            double     td771 = V.get(2, 5);
            V.unsafe_set(5, 2, td771);
                        
            V.unsafe_set(3, 3, (1911.75 + t * (-4328.25 + t * (-4536.75 + t * (11243.25 + t * (18769.5 + t * (-39406.5 + t * (-8221.5 + t * (37930.5 + t * (17106.75 + t * (-61613.25 + (39482.25 - 8337.75 * t) * t)))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 6)));
                        
            V.unsafe_set(3, 4, (1732.5 + t * (-7339.499999999999 + t * (5701.499999999993 + t * (15781.5 + t * (-22491. + t * (-22490.99999999994 + t * (54243. + t * (-189. + t * (-72481.5 + t * (73678.5 + t * (-31216.5 + 5071.5 * t))))))))))) / ((1. + t * (11. + t * (55. + t * (165. + t * (330. + t * (462. + t * (462. + t * (330. + t * (165. + t * (55. + t * (11. + t))))))))))) * Math.pow(u, 7)));
                        
            //  V(4, 3) = V(3, 4)
            double     td875 = V.get(3, 4);
            V.unsafe_set(4, 3, td875);
                        
            V.unsafe_set(3, 5, (686.0 + t * (-4550.0 + t * (11522.0 + t * (-12138.0 + t * (1932.0 + t * (-2940.0 + t * (34692.0 + t * (-69972.0 + t * (68838.0 + t * (-37982.0 + (11354.0 - 1442.0 * t) * t)))))))))) / ((1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))) * Math.pow(u, 8)));
                        
            //  V(5, 3) = V(3, 5)
            double     td927 = V.get(3, 5);
            V.unsafe_set(5, 3, td927);
                        
            V.unsafe_set(4, 4, (1582.0 + t * (-9814.0 + t * (20230.0 + t * (-1470.0 + t * (-60900.0 + t * (98196.0 + t * (-34692.0 + t * (-75180.0 + t * (114870.0 + t * (-73150.0 + (23422.0 - 3094.0 * t) * t)))))))))) / ((1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))) * Math.pow(u, 8)));
                        
            V.unsafe_set(4, 5, (630.0 + t * (-5418.0 + t * (19530.0 + t * (-35910.0 + t * (26460.0 + t * (26460.0 + t * (-89964.0 + t * (109620.0 + t * (-77490.0 + t * (33390.0 + t * (-8190.0 + 882.0 * t))))))))))) / ((1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))) * Math.pow(u, 9)));
                        
            //  V(5, 4) = V(4, 5)
            double     td1031 = V.get(4, 5);
            V.unsafe_set(5, 4, td1031);
                        
            V.unsafe_set(5, 5, (252.0 + t * (-2772.0 + t * (13860.0 + t * (-41580.0 + t * (83160.0 + t * (-116424.0 + t * (116424.0 + t * (-83160.0 + t * (41580.0 + t * (-13860.0 + (2772.0 - 252.0 * t) * t)))))))))) / ((1.0 + t * (11.0 + t * (55.0 + t * (165.0 + t * (330.0 + t * (462.0 + t * (462.0 + t * (330.0 + t * (165.0 + t * (55.0 + t * (11.0 + t))))))))))) * Math.pow(u, 10)));
        } else {
                        
            s = 1.0 - t;
                        
            V.unsafe_set(0, 0, (s * (-9516.0 + s * (67812.0 + s * (-224110.0 + s * (451360.0 + s * (-611854.0 + s * (581660.0 + s * (-391622.0 + s * (183920.0 + s * (-57530.0 + (10802.0 - 923.0 * s) * s)))))))))) / (-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))));
                        
            V.unsafe_set(0, 1, (Math.pow(s, 2) * (-20232. + s * (130950. + s * (-383876. + s * (668509. + s * (-761564.1333333333 + s * (588014.5333333333 + s * (-307408.3333333333 + s * (104815.75 + s * (-21127. + 1915.8999999999999 * s)))))))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * u));
                        
            //  V(1, 0) = V(0, 1)
            double     td1192 = V.get(0, 1);
            V.unsafe_set(1, 0, td1192);
                        
            V.unsafe_set(0, 2, (Math.pow(s, 3) * (-24232.000000000004 + s * (141904. + s * (-368135. + s * (552323. + s * (-523962.5 + s * (321742. + s * (-124862.75 + (27994.999999999996 - 2775.5 * s) * s)))))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 2)));
                        
            //  V(2, 0) = V(0, 2)
            double     td1245 = V.get(0, 2);
            V.unsafe_set(2, 0, td1245);
                        
            V.unsafe_set(0, 3, (Math.pow(s, 4) * (-16872. + s * (88878. + s * (-202508. + s * (258450.5 + s * (-199362.5 + s * (92888.25 + s * (-24198. + 2719.5 * s)))))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 3)));
                        
            //  V(3, 0) = V(0, 3)
            double     td1296 = V.get(0, 3);
            V.unsafe_set(3, 0, td1296);
                        
            V.unsafe_set(0, 4, (Math.pow(s, 5) * (-6396.0 + s * (30060.0 + s * (-59418.0 + s * (63120.0 + s * (-37935.0 + (12204.0 - 1638.0 * s) * s)))))) / ((-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))) * Math.pow(u, 4)));
                        
            //  V(4, 0) = V(0, 4)
            double     td1344 = V.get(0, 4);
            V.unsafe_set(4, 0, td1344);
                        
            V.unsafe_set(0, 5, (Math.pow(s, 6) * (-1024.0 + s * (4246.0 + s * (-7150.0 + s * (6105.0 + s * (-2640.0 + 462.0 * s)))))) / ((-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))) * Math.pow(u, 5)));
                        
            //  V(5, 0) = V(0, 5)
            double     td1390 = V.get(0, 5);
            V.unsafe_set(5, 0, td1390);
                        
            V.unsafe_set(1, 1, (Math.pow(s, 3) * (-55580. + s * (295400. + s * (-705460. + s * (986510. + s * (-881918.7999999999 + s * (515277. + s * (-191838.53888888887 + (41542.23888888889 - 3999.827222222222 * s) * s)))))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 2)));
                        
            V.unsafe_set(1, 2, (Math.pow(s, 4) * (-73080. + s * (332640. + s * (-666656.6666666666 + s * (760264.1666666667 + s * (-531638.5666666667 + s * (227563.4666666667 + s * (-55126.166666666664 + 5822.016666666666 * s)))))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 3)));
                        
            //  V(2, 1) = V(1, 2)
            double     td1493 = V.get(1, 2);
            V.unsafe_set(2, 1, td1493);
                        
            V.unsafe_set(1, 3, (Math.pow(s, 5) * (-53255.99999999999 + s * (207647.99999999997 + s * (-347466. + s * (317730. + s * (-166771.73333333334 + (47501.183333333334 - 5726.233333333334 * s) * s)))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 4)));
                        
            //  V(3, 1) = V(1, 3)
            double     td1541 = V.get(1, 3);
            V.unsafe_set(3, 1, td1541);
                        
            V.unsafe_set(1, 4, (Math.pow(s, 6) * (-20720.000000000004 + s * (68306. + s * (-93590.00000000001 + s * (65968. + s * (-23724.4 + 3459.4000000000005 * s)))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 5)));
                        
            //  V(4, 1) = V(1, 4)
            double     td1587 = V.get(1, 4);
            V.unsafe_set(4, 1, td1587);
                        
            V.unsafe_set(1, 5, (Math.pow(s, 7) * (-3372. + s * (9180. + s * (-9962.666666666666 + (5015.666666666667 - 978.0666666666666 * s) * s)))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 6)));
                        
            //  V(5, 1) = V(1, 5)
            double     td1630 = V.get(1, 5);
            V.unsafe_set(5, 1, td1630);
                        
            V.unsafe_set(2, 2, (Math.pow(s, 5) * (-100463.99999999999 + s * (376431.99999999994 + s * (-603259.9999999999 + s * (528079.9999999999 + s * (-265946.52777777775 + (72981.02777777777 - 8514.819444444443 * s) * s)))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 4)));
                        
            V.unsafe_set(2, 3, (Math.pow(s, 6) * (-75040. + s * (230860. + s * (-291676. + s * (188639.5 + s * (-62335. + 8409.625 * s)))))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 5)));
                        
            //  V(3, 2) = V(2, 3)
            double     td1723 = V.get(2, 3);
            V.unsafe_set(3, 2, td1723);
                        
            V.unsafe_set(2, 4, (Math.pow(s, 7) * (-29640. + s * (73056. + s * (-69853.66666666666 + (30511.666666666664 - 5098.166666666666 * s) * s)))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 6)));
                        
            //  V(4, 2) = V(2, 4)
            double     td1766 = V.get(2, 4);
            V.unsafe_set(4, 2, td1766);
                        
            V.unsafe_set(2, 5, (Math.pow(s, 8) * (-4872. + s * (9184. + s * (-6160. + 1445.5 * s)))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 7)));
                        
            //  V(5, 2) = V(2, 5)
            double     td1807 = V.get(2, 5);
            V.unsafe_set(5, 2, td1807);
                        
            V.unsafe_set(3, 3, (Math.pow(s, 7) * (-56880. + s * (136440. + s * (-125367. + (52233. - 8337.75 * s) * s)))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 6)));
                        
            V.unsafe_set(3, 4, (Math.pow(s, 8) * (-22679.999999999996 + s * (40446. + s * (-24570. + 5071.5 * s)))) / ((-2048. + s * (11264. + s * (-28160. + s * (42240. + s * (-42240. + s * (29568. + s * (-14784. + s * (5280. + s * (-1320. + s * (220. + (-22. + s) * s)))))))))) * Math.pow(u, 7)));
                        
            //  V(4, 3) = V(3, 4)
            double     td1890 = V.get(3, 4);
            V.unsafe_set(4, 3, td1890);
                        
            V.unsafe_set(3, 5, (Math.pow(s, 9) * (-3752.0 + (4508.0 - 1442.0 * s) * s)) / ((-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))) * Math.pow(u, 8)));
                        
            //  V(5, 3) = V(3, 5)
            double     td1928 = V.get(3, 5);
            V.unsafe_set(5, 3, td1928);
                        
            V.unsafe_set(4, 4, (Math.pow(s, 9) * (-9100.0 + (10612.0 - 3094.0 * s) * s)) / ((-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))) * Math.pow(u, 8)));
                        
            V.unsafe_set(4, 5, (Math.pow(s, 10) * (-1512.0 + 882.0 * s)) / ((-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))) * Math.pow(u, 9)));
                        
            //  V(5, 4) = V(4, 5)
            double     td2001 = V.get(4, 5);
            V.unsafe_set(5, 4, td2001);
                        
            V.unsafe_set(5, 5, (-252.0 * Math.pow(s, 11)) / ((-2048.0 + s * (11264.0 + s * (-28160.0 + s * (42240.0 + s * (-42240.0 + s * (29568.0 + s * (-14784.0 + s * (5280.0 + s * (-1320.0 + s * (220.0 + (-22.0 + s) * s)))))))))) * Math.pow(u, 10)));
        }
        return V;
    }
    
} // class Fmp

