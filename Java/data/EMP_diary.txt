 
---------------------------------------
Expanding Memory VRF for degree : 0 0
---------------------------------------
V[0,0] =       1.0/(n + 1)
 
---------------------------------------
Expanding Memory VRF for degree : 0 1
---------------------------------------
V[0,0] =       1.0/(n + 1)
>> vrf_all(2)
 
---------------------------------------
Expanding Memory VRF for degree : 1 0
---------------------------------------
V[0,0] =       2*(2*n + 1)/(n**2 + 3*n + 2)
V[0,1] =       6/(tau*(n + 1)*(n + 2))
V[1,0] = V[0,1];
V[1,1] =       12/(n*tau**2*(n + 1)*(n + 2))
 
---------------------------------------
Expanding Memory VRF for degree : 1 1
---------------------------------------
V[0,0] =       2*(2*n + 3)/(n*(n + 1))
V[0,1] =       6/(n*tau*(n + 1))
V[1,0] = V[0,1];
V[1,1] =       12/(n*tau**2*(n + 1)*(n + 2))
>> vrf_all(3)
 
---------------------------------------
Expanding Memory VRF for degree : 2 0
---------------------------------------
V[0,0] =       3*(3*n**2 + 3*n + 2)/(n**3 + 6*n**2 + 11*n + 6)
V[0,1] =       18*(2*n + 1)/(tau*(n + 1)*(n + 2)*(n + 3))
V[1,0] = V[0,1];
V[0,2] =       60/(tau**2*(n + 1)*(n + 2)*(n + 3))
V[2,0] = V[0,2];
V[1,1] =       12*(15*n**2 + (n - 1)*(n + 3))/(n*tau**2*(n - 1)*(n + 1)*(n + 2)*(
     @ n + 3))
V[1,2] =       360/(tau**3*(n - 1)*(n + 1)*(n + 2)*(n + 3))
V[2,1] = V[1,2];
V[2,2] =       720/(n*tau**4*(n - 1)*(n + 1)*(n + 2)*(n + 3))
 
---------------------------------------
Expanding Memory VRF for degree : 2 1
---------------------------------------
V[0,0] =       3*(3*n**2 + 9*n + 8)/(n*(n**2 - 1))
V[0,1] =       18*(2*n + 3)/(n*tau*(n**2 - 1))
V[1,0] = V[0,1];
V[0,2] =       60/(n*tau**2*(n**2 - 1))
V[2,0] = V[0,2];
V[1,1] =       12*((n - 1)*(n + 3) + 15*(n + 2)**2)/(n*tau**2*(n - 1)*(n + 1)*(n
     @ + 2)*(n + 3))
V[1,2] =       360/(n*tau**3*(n - 1)*(n + 1)*(n + 3))
V[2,1] = V[1,2];
V[2,2] =       720/(n*tau**4*(n - 1)*(n + 1)*(n + 2)*(n + 3))
>> vrf_all(4)
 
---------------------------------------
Expanding Memory VRF for degree : 3 0
---------------------------------------
V[0,0] =       8*(2*n**3 + 3*n**2 + 7*n + 3)/(n**4 + 10*n**3 + 35*n**2 + 50*n +
     @ 24)
V[0,1] =       20*(6*n**2 + 6*n + 5)/(tau*(n**4 + 10*n**3 + 35*n**2 + 50*n + 24))
V[1,0] = V[0,1];
V[0,2] =       240*(2*n + 1)/(tau**2*(n + 1)*(n + 2)*(n + 3)*(n + 4))
V[2,0] = V[0,2];
V[0,3] =       840/(tau**3*(n + 1)*(n + 2)*(n + 3)*(n + 4))
V[3,0] = V[0,3];
V[1,1] =       200*(6*n**4 - 3*n**3 - 3*n**2 - 3*n + 2)/(n*tau**2*(n**6 + 7*n**5
     @ + 7*n**4 - 35*n**3 - 56*n**2 + 28*n + 48))
V[1,2] =       600*(9*n**2 - 3*n - 2)/(tau**3*(n**6 + 7*n**5 + 7*n**4 - 35*n**3 -
     @ 56*n**2 + 28*n + 48))
V[2,1] = V[1,2];
V[1,3] =       1680*(6*n**2 - 3*n + 2)/(n*tau**4*(n**6 + 7*n**5 + 7*n**4 - 35*n**
     @ 3 - 56*n**2 + 28*n + 48))
V[3,1] = V[1,3];
V[2,2] =       720*(35*n**2 + (n - 2)*(n + 4))/(n*tau**4*(n - 2)*(n - 1)*(n + 1)*
     @ (n + 2)*(n + 3)*(n + 4))
V[2,3] =       50400/(tau**5*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4))
V[3,2] = V[2,3];
V[3,3] =       100800/(n*tau**6*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4))
 
---------------------------------------
Expanding Memory VRF for degree : 3 1
---------------------------------------
V[0,0] =       8*(2*n**3 + 9*n**2 + 19*n + 15)/(n*(n**3 - 2*n**2 - n + 2))
V[0,1] =       20*(6*n**2 + 18*n + 17)/(n*tau*(n**3 - 2*n**2 - n + 2))
V[1,0] = V[0,1];
V[0,2] =       240*(2*n + 3)/(n*tau**2*(n**3 - 2*n**2 - n + 2))
V[2,0] = V[0,2];
V[0,3] =       840/(n*tau**3*(n**3 - 2*n**2 - n + 2))
V[3,0] = V[0,3];
V[1,1] =       200*(6*n**4 + 51*n**3 + 159*n**2 + 219*n + 116)/(n*tau**2*(n**6 +
     @ 7*n**5 + 7*n**4 - 35*n**3 - 56*n**2 + 28*n + 48))
V[1,2] =       600*(9*n**2 + 39*n + 40)/(n*tau**3*(n**5 + 5*n**4 - 3*n**3 - 29*n
     @ **2 + 2*n + 24))
V[2,1] = V[1,2];
V[1,3] =       1680*(6*n**2 + 27*n + 32)/(n*tau**4*(n**6 + 7*n**5 + 7*n**4 - 35*n
     @ **3 - 56*n**2 + 28*n + 48))
V[3,1] = V[1,3];
V[2,2] =       720*((n - 2)*(n + 4) + 35*(n + 2)**2)/(n*tau**4*(n - 2)*(n - 1)*(n
     @ + 1)*(n + 2)*(n + 3)*(n + 4))
V[2,3] =       50400/(n*tau**5*(n - 2)*(n - 1)*(n + 1)*(n + 3)*(n + 4))
V[3,2] = V[2,3];
V[3,3] =       100800/(n*tau**6*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4))
>> vrf_all(5)
 
---------------------------------------
Expanding Memory VRF for degree : 4 0
---------------------------------------
V[0,0] =       5*(5*n**4 + 10*n**3 + 55*n**2 + 50*n + 24)/(n**5 + 15*n**4 + 85*n
     @ **3 + 225*n**2 + 274*n + 120)
V[0,1] =       50*(6*n**3 + 9*n**2 + 23*n + 10)/(tau*(n**5 + 15*n**4 + 85*n**3 +
     @ 225*n**2 + 274*n + 120))
V[1,0] = V[0,1];
V[0,2] =       2100*(n**2 + n + 1)/(tau**2*(n**5 + 15*n**4 + 85*n**3 + 225*n**2 +
     @ 274*n + 120))
V[2,0] = V[0,2];
V[0,3] =       4200*(2*n + 1)/(tau**3*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5))
V[3,0] = V[0,3];
V[0,4] =       15120/(tau**4*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5))
V[4,0] = V[0,4];
V[1,1] =       100*(48*n**6 - 90*n**5 + 63*n**4 - 198*n**3 + 307*n**2 + 98*n - 60
     @ )/(n*tau**2*(n**8 + 9*n**7 + 6*n**6 - 126*n**5 - 231*n**4 + 441*n
     @ **3 + 944*n**2 - 324*n - 720))
V[1,2] =       4200*(9*n**4 - 12*n**3 + 7*n**2 - 7*n + 15)/(tau**3*(n**8 + 9*n**7
     @ + 6*n**6 - 126*n**5 - 231*n**4 + 441*n**3 + 944*n**2 - 324*n -
     @ 720))
V[2,1] = V[1,2];
V[1,3] =       1680*(96*n**4 - 126*n**3 + 131*n**2 + 49*n - 30)/(n*tau**4*(n**8 +
     @ 9*n**7 + 6*n**6 - 126*n**5 - 231*n**4 + 441*n**3 + 944*n**2 - 324
     @ *n - 720))
V[3,1] = V[1,3];
V[1,4] =       151200*(2*n**2 - 3*n + 5)/(tau**5*(n**8 + 9*n**7 + 6*n**6 - 126*n
     @ **5 - 231*n**4 + 441*n**3 + 944*n**2 - 324*n - 720))
V[4,1] = V[1,4];
V[2,2] =       35280*(9*n**4 - 4*n**3 - n**2 - 4*n + 5)/(n*tau**4*(n**8 + 9*n**7
     @ + 6*n**6 - 126*n**5 - 231*n**4 + 441*n**3 + 944*n**2 - 324*n -
     @ 720))
V[2,3] =       352800*n*(4*n - 1)/(tau**5*(n**8 + 9*n**7 + 6*n**6 - 126*n**5 -
     @ 231*n**4 + 441*n**3 + 944*n**2 - 324*n - 720))
V[3,2] = V[2,3];
V[2,4] =       302400*(9*n**2 - 3*n + 5)/(n*tau**6*(n**8 + 9*n**7 + 6*n**6 - 126*
     @ n**5 - 231*n**4 + 441*n**3 + 944*n**2 - 324*n - 720))
V[4,2] = V[2,4];
V[3,3] =       100800*(63*n**2 + (n - 3)*(n + 5))/(n*tau**6*(n - 3)*(n - 2)*(n -
     @ 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5))
V[3,4] =       12700800/(tau**7*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)*(
     @ n + 4)*(n + 5))
V[4,3] = V[3,4];
V[4,4] =       25401600/(n*tau**8*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)
     @ *(n + 4)*(n + 5))
 
---------------------------------------
Expanding Memory VRF for degree : 4 1
---------------------------------------
Waiting.......
V[0,0] =       5*(5*n**4 + 30*n**3 + 115*n**2 + 210*n + 144)/(n*(n**4 - 5*n**3 +
     @ 5*n**2 + 5*n - 6))
V[0,1] =       50*(6*n**3 + 27*n**2 + 59*n + 48)/(n*tau*(n**4 - 5*n**3 + 5*n**2 +
     @ 5*n - 6))
V[1,0] = V[0,1];
V[0,2] =       2100*(n**2 + 3*n + 3)/(n*tau**2*(n**4 - 5*n**3 + 5*n**2 + 5*n - 6
     @ ))
V[2,0] = V[0,2];
V[0,3] =       4200*(2*n + 3)/(n*tau**3*(n**4 - 5*n**3 + 5*n**2 + 5*n - 6))
V[3,0] = V[0,3];
V[0,4] =       15120/(n*tau**4*(n**4 - 5*n**3 + 5*n**2 + 5*n - 6))
V[4,0] = V[0,4];
V[1,1] =       100*(48*n**6 + 666*n**5 + 3843*n**4 + 11982*n**3 + 21727*n**2 +
     @ 21938*n + 9516)/(n*tau**2*(n**8 + 9*n**7 + 6*n**6 - 126*n**5 -
     @ 231*n**4 + 441*n**3 + 944*n**2 - 324*n - 720))
V[1,2] =       4200*(9*n**4 + 84*n**3 + 295*n**2 + 467*n + 297)/(n*tau**3*(n**7 +
     @ 7*n**6 - 8*n**5 - 110*n**4 - 11*n**3 + 463*n**2 + 18*n - 360))
V[2,1] = V[1,2];
V[1,3] =       1680*(96*n**4 + 894*n**3 + 3191*n**2 + 5059*n + 2940)/(n*tau**4*(n
     @ **8 + 9*n**7 + 6*n**6 - 126*n**5 - 231*n**4 + 441*n**3 + 944*n**2
     @ - 324*n - 720))
V[3,1] = V[1,3];
V[1,4] =       151200*(2*n**2 + 11*n + 19)/(n*tau**5*(n**7 + 7*n**6 - 8*n**5 -
     @ 110*n**4 - 11*n**3 + 463*n**2 + 18*n - 360))
V[4,1] = V[1,4];
V[2,2] =       35280*(9*n**4 + 76*n**3 + 239*n**2 + 336*n + 185)/(n*tau**4*(n**8
     @ + 9*n**7 + 6*n**6 - 126*n**5 - 231*n**4 + 441*n**3 + 944*n**2 -
     @ 324*n - 720))
V[2,3] =       352800*(4*n**2 + 17*n + 18)/(n*tau**5*(n**7 + 7*n**6 - 8*n**5 -
     @ 110*n**4 - 11*n**3 + 463*n**2 + 18*n - 360))
V[3,2] = V[2,3];
V[2,4] =       302400*(9*n**2 + 39*n + 47)/(n*tau**6*(n**8 + 9*n**7 + 6*n**6 -
     @ 126*n**5 - 231*n**4 + 441*n**3 + 944*n**2 - 324*n - 720))
V[4,2] = V[2,4];
V[3,3] =       100800*((n - 3)*(n + 5) + 63*(n + 2)**2)/(n*tau**6*(n - 3)*(n - 2)
     @ *(n - 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5))
V[3,4] =       12700800/(n*tau**7*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n + 3)*(n + 4)
     @ *(n + 5))
V[4,3] = V[3,4];
V[4,4] =       25401600/(n*tau**8*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)
     @ *(n + 4)*(n + 5))
>> vrf_all(6)
 
---------------------------------------
Expanding Memory VRF for degree : 5 0
---------------------------------------
Waiting..........
V[0,0] =       6*(6*n**5 + 15*n**4 + 160*n**3 + 225*n**2 + 314*n + 120)/(n**6 +
     @ 21*n**5 + 175*n**4 + 735*n**3 + 1624*n**2 + 1764*n + 720)
V[0,1] =       126*(5*n**4 + 10*n**3 + 55*n**2 + 50*n + 28)/(tau*(n**6 + 21*n**5
     @ + 175*n**4 + 735*n**3 + 1624*n**2 + 1764*n + 720))
V[1,0] = V[0,1];
V[0,2] =       840*(8*n**3 + 12*n**2 + 34*n + 15)/(tau**2*(n**6 + 21*n**5 + 175*n
     @ **4 + 735*n**3 + 1624*n**2 + 1764*n + 720))
V[2,0] = V[0,2];
V[0,3] =       7560*(6*n**2 + 6*n + 7)/(tau**3*(n**6 + 21*n**5 + 175*n**4 + 735*n
     @ **3 + 1624*n**2 + 1764*n + 720))
V[3,0] = V[0,3];
V[0,4] =       90720*(2*n + 1)/(tau**4*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n
     @ + 6))
V[4,0] = V[0,4];
V[0,5] =       332640/(tau**5*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6))
V[5,0] = V[0,5];
V[1,1] =       588*(25*n**8 - 100*n**7 + 250*n**6 - 700*n**5 + 1585*n**4 - 280*n
     @ **3 - 540*n**2 - 600*n + 288)/(n*tau**2*(n**10 + 11*n**9 - 330*n
     @ **7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 +
     @ 6336*n + 17280))
V[1,2] =       17640*(10*n**6 - 30*n**5 + 65*n**4 - 100*n**3 + 219*n**2 - 44*n -
     @ 48)/(tau**3*(n**10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 +
     @ 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[2,1] = V[1,2];
V[1,3] =       105840*(12*n**6 - 33*n**5 + 75*n**4 - 30*n**3 + 50*n**2 - 50*n +
     @ 24)/(n*tau**4*(n**10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5
     @ + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[3,1] = V[1,3];
V[1,4] =       211680*(25*n**4 - 70*n**3 + 185*n**2 - 20*n - 48)/(tau**5*(n**10 +
     @ 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3
     @ - 24024*n**2 + 6336*n + 17280))
V[4,1] = V[1,4];
V[1,5] =       665280*(15*n**4 - 45*n**3 + 140*n**2 - 50*n + 24)/(n*tau**6*(n**10
     @ + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n
     @ **3 - 24024*n**2 + 6336*n + 17280))
V[5,1] = V[1,5];
V[2,2] =       70560*(32*n**6 - 48*n**5 + 80*n**4 - 120*n**3 + 258*n**2 + 53*n -
     @ 60)/(n*tau**4*(n**10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5
     @ + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[2,3] =       1058400*(16*n**4 - 16*n**3 + 26*n**2 - 14*n + 33)/(tau**5*(n**10 +
     @ 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3
     @ - 24024*n**2 + 6336*n + 17280))
V[3,2] = V[2,3];
V[2,4] =       604800*(120*n**4 - 108*n**3 + 238*n**2 + 41*n - 60)/(n*tau**6*(n**
     @ 10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020
     @ *n**3 - 24024*n**2 + 6336*n + 17280))
V[4,2] = V[2,4];
V[2,5] =       139708800*(n**2 - n + 3)/(tau**7*(n**10 + 11*n**9 - 330*n**7 - 627
     @ *n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*n +
     @ 17280))
V[5,2] = V[2,5];
V[3,3] =       2721600*(48*n**4 - 18*n**3 + 14*n**2 - 20*n + 39)/(n*tau**6*(n**10
     @ + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n
     @ **3 - 24024*n**2 + 6336*n + 17280))
V[3,4] =       114307200*(5*n**2 - n + 1)/(tau**7*(n**10 + 11*n**9 - 330*n**7 -
     @ 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*
     @ n + 17280))
V[4,3] = V[3,4];
V[3,5] =       279417600*(4*n**2 - n + 3)/(n*tau**8*(n**10 + 11*n**9 - 330*n**7 -
     @ 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*
     @ n + 17280))
V[5,3] = V[3,5];
V[4,4] =       25401600*(99*n**2 + (n - 4)*(n + 6))/(n*tau**8*(n - 4)*(n - 3)*(n
     @ - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6))
V[4,5] =       5029516800/(tau**9*(n - 4)*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n + 2)
     @ *(n + 3)*(n + 4)*(n + 5)*(n + 6))
V[5,4] = V[4,5];
V[5,5] =       10059033600/(n*tau**10*(n - 4)*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n
     @ + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6))
 
---------------------------------------
Expanding Memory VRF for degree : 5 1
---------------------------------------
Waiting................
V[0,0] =       6*(6*n**5 + 45*n**4 + 280*n**3 + 855*n**2 + 1334*n + 840)/(n*(n**5
     @ - 9*n**4 + 25*n**3 - 15*n**2 - 26*n + 24))
V[0,1] =       126*(5*n**4 + 30*n**3 + 115*n**2 + 210*n + 148)/(n*tau*(n**5 - 9*n
     @ **4 + 25*n**3 - 15*n**2 - 26*n + 24))
V[1,0] = V[0,1];
V[0,2] =       840*(8*n**3 + 36*n**2 + 82*n + 69)/(n*tau**2*(n**5 - 9*n**4 + 25*n
     @ **3 - 15*n**2 - 26*n + 24))
V[2,0] = V[0,2];
V[0,3] =       7560*(6*n**2 + 18*n + 19)/(n*tau**3*(n**5 - 9*n**4 + 25*n**3 - 15*
     @ n**2 - 26*n + 24))
V[3,0] = V[0,3];
V[0,4] =       90720*(2*n + 3)/(n*tau**4*(n**5 - 9*n**4 + 25*n**3 - 15*n**2 - 26*
     @ n + 24))
V[4,0] = V[0,4];
V[0,5] =       332640/(n*tau**5*(n**5 - 9*n**4 + 25*n**3 - 15*n**2 - 26*n + 24))
V[5,0] = V[0,5];
V[1,1] =       588*(25*n**8 + 500*n**7 + 4450*n**6 + 23300*n**5 + 79585*n**4 +
     @ 181760*n**3 + 267180*n**2 + 226920*n + 84528)/(n*tau**2*(n**10 +
     @ 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3
     @ - 24024*n**2 + 6336*n + 17280))
V[1,2] =       17640*(10*n**6 + 150*n**5 + 965*n**4 + 3420*n**3 + 7179*n**2 +
     @ 8520*n + 4356)/(n*tau**3*(n**9 + 9*n**8 - 18*n**7 - 294*n**6 - 39
     @ *n**5 + 3081*n**4 + 1208*n**3 - 11436*n**2 - 1152*n + 8640))
V[2,1] = V[1,2];
V[1,3] =       105840*(12*n**6 + 177*n**5 + 1125*n**4 + 3870*n**3 + 7550*n**2 +
     @ 7954*n + 3588)/(n*tau**4*(n**10 + 11*n**9 - 330*n**7 - 627*n**6 +
     @ 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[3,1] = V[1,3];
V[1,4] =       211680*(25*n**4 + 270*n**3 + 1205*n**2 + 2400*n + 1692)/(n*tau**5*
     @ (n**9 + 9*n**8 - 18*n**7 - 294*n**6 - 39*n**5 + 3081*n**4 + 1208*
     @ n**3 - 11436*n**2 - 1152*n + 8640))
V[4,1] = V[1,4];
V[1,5] =       665280*(15*n**4 + 165*n**3 + 770*n**2 + 1630*n + 1284)/(n*tau**6*(
     @ n**10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 -
     @ 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[5,1] = V[1,5];
V[2,2] =       70560*(32*n**6 + 432*n**5 + 2480*n**4 + 7800*n**3 + 14418*n**2 +
     @ 14963*n + 6690)/(n*tau**4*(n**10 + 11*n**9 - 330*n**7 - 627*n**6
     @ + 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 + 6336*n + 17280
     @ ))
V[2,3] =       1058400*(16*n**4 + 144*n**3 + 506*n**2 + 822*n + 549)/(n*tau**5*(n
     @ **9 + 9*n**8 - 18*n**7 - 294*n**6 - 39*n**5 + 3081*n**4 + 1208*n
     @ **3 - 11436*n**2 - 1152*n + 8640))
V[3,2] = V[2,3];
V[2,4] =       604800*(120*n**4 + 1068*n**3 + 3766*n**2 + 6047*n + 3594)/(n*tau**
     @ 6*(n**10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4
     @ - 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[4,2] = V[2,4];
V[2,5] =       139708800*(n**2 + 5*n + 9)/(n*tau**7*(n**9 + 9*n**8 - 18*n**7 -
     @ 294*n**6 - 39*n**5 + 3081*n**4 + 1208*n**3 - 11436*n**2 - 1152*n
     @ + 8640))
V[5,2] = V[2,5];
V[3,3] =       2721600*(48*n**4 + 402*n**3 + 1274*n**2 + 1828*n + 1047)/(n*tau**6
     @ *(n**10 + 11*n**9 - 330*n**7 - 627*n**6 + 3003*n**5 + 7370*n**4 -
     @ 9020*n**3 - 24024*n**2 + 6336*n + 17280))
V[3,4] =       114307200*(5*n**2 + 21*n + 23)/(n*tau**7*(n**9 + 9*n**8 - 18*n**7
     @ - 294*n**6 - 39*n**5 + 3081*n**4 + 1208*n**3 - 11436*n**2 - 1152*
     @ n + 8640))
V[4,3] = V[3,4];
V[3,5] =       279417600*(4*n**2 + 17*n + 21)/(n*tau**8*(n**10 + 11*n**9 - 330*n
     @ **7 - 627*n**6 + 3003*n**5 + 7370*n**4 - 9020*n**3 - 24024*n**2 +
     @ 6336*n + 17280))
V[5,3] = V[3,5];
V[4,4] =       25401600*((n - 4)*(n + 6) + 99*(n + 2)**2)/(n*tau**8*(n - 4)*(n -
     @ 3)*(n - 2)*(n - 1)*(n + 1)*(n + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6
     @ ))
V[4,5] =       5029516800/(n*tau**9*(n - 4)*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n +
     @ 3)*(n + 4)*(n + 5)*(n + 6))
V[5,4] = V[4,5];
V[5,5] =       10059033600/(n*tau**10*(n - 4)*(n - 3)*(n - 2)*(n - 1)*(n + 1)*(n
     @ + 2)*(n + 3)*(n + 4)*(n + 5)*(n + 6))
>> diary off
